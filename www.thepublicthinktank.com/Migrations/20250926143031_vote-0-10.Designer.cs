// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using atlas_the_public_think_tank.Data.DbContext;

#nullable disable

namespace atlas_the_public_think_tank.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250926143031_vote-0-10")]
    partial class vote010
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("atlas_the_public_think_tank.Data.DatabaseEntities.Content.Comment.Comment", b =>
                {
                    b.Property<Guid>("CommentID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AuthorID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("BlockedContentID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasMaxLength(3000)
                        .HasColumnType("nvarchar(3000)");

                    b.Property<int>("ContentStatus")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("IssueID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("ParentCommentID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("PeriodEnd")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime2")
                        .HasColumnName("PeriodEnd");

                    b.Property<DateTime>("PeriodStart")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime2")
                        .HasColumnName("PeriodStart");

                    b.Property<Guid?>("SolutionID")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("CommentID");

                    b.HasIndex("AuthorID");

                    b.HasIndex("BlockedContentID");

                    b.HasIndex("IssueID");

                    b.HasIndex("ParentCommentID");

                    b.HasIndex("SolutionID");

                    b.ToTable("Comments", "comments");

                    b.ToTable(tb => tb.IsTemporal(ttb =>
                            {
                                ttb.UseHistoryTable("CommentsHistory", "comments");
                                ttb
                                    .HasPeriodStart("PeriodStart")
                                    .HasColumnName("PeriodStart");
                                ttb
                                    .HasPeriodEnd("PeriodEnd")
                                    .HasColumnName("PeriodEnd");
                            }));
                });

            modelBuilder.Entity("atlas_the_public_think_tank.Data.DatabaseEntities.Content.Comment.CommentVote", b =>
                {
                    b.Property<Guid>("VoteID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("AppUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CommentID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("UserID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("VoteValue")
                        .HasColumnType("int");

                    b.HasKey("VoteID");

                    b.HasIndex("AppUserId");

                    b.HasIndex("UserID");

                    b.HasIndex("CommentID", "UserID")
                        .IsUnique();

                    b.ToTable("CommentVotes", "comments", t =>
                        {
                            t.HasCheckConstraint("CK_CommentVote_VoteValue_Range", "[VoteValue] >= 0 AND [VoteValue] <= 10");
                        });
                });

            modelBuilder.Entity("atlas_the_public_think_tank.Data.DatabaseEntities.Content.Common.Scope", b =>
                {
                    b.Property<Guid>("ScopeID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.PrimitiveCollection<string>("Boundaries")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.PrimitiveCollection<string>("Domains")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.PrimitiveCollection<string>("EntityTypes")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("PeriodEnd")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime2")
                        .HasColumnName("PeriodEnd");

                    b.Property<DateTime>("PeriodStart")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime2")
                        .HasColumnName("PeriodStart");

                    b.PrimitiveCollection<string>("Scales")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.PrimitiveCollection<string>("Timeframes")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ScopeID");

                    b.ToTable("Scopes", "scopes");

                    b.ToTable(tb => tb.IsTemporal(ttb =>
                            {
                                ttb.UseHistoryTable("ScopesHistory", "scopes");
                                ttb
                                    .HasPeriodStart("PeriodStart")
                                    .HasColumnName("PeriodStart");
                                ttb
                                    .HasPeriodEnd("PeriodEnd")
                                    .HasColumnName("PeriodEnd");
                            }));
                });

            modelBuilder.Entity("atlas_the_public_think_tank.Data.DatabaseEntities.Content.Issue.Issue", b =>
                {
                    b.Property<Guid>("IssueID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AuthorID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("BlockedContentID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ContentStatus")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("ParentIssueID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ParentSolutionID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("PeriodEnd")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime2")
                        .HasColumnName("PeriodEnd");

                    b.Property<DateTime>("PeriodStart")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime2")
                        .HasColumnName("PeriodStart");

                    b.Property<int?>("RANK")
                        .HasColumnType("int");

                    b.Property<Guid?>("ScopeID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("SolutionID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("IssueID");

                    b.HasIndex("AuthorID");

                    b.HasIndex("BlockedContentID");

                    b.HasIndex("ParentIssueID");

                    b.HasIndex("ParentSolutionID");

                    b.HasIndex("ScopeID");

                    b.HasIndex("SolutionID");

                    b.ToTable("Issues", "issues");

                    b.ToTable(tb => tb.IsTemporal(ttb =>
                            {
                                ttb.UseHistoryTable("IssuesHistory", "issues");
                                ttb
                                    .HasPeriodStart("PeriodStart")
                                    .HasColumnName("PeriodStart");
                                ttb
                                    .HasPeriodEnd("PeriodEnd")
                                    .HasColumnName("PeriodEnd");
                            }));
                });

            modelBuilder.Entity("atlas_the_public_think_tank.Data.DatabaseEntities.Content.Issue.IssueTag", b =>
                {
                    b.Property<Guid>("TagID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("IssueID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("TagName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("TagID", "IssueID");

                    b.HasIndex("IssueID");

                    b.ToTable("IssuesTags", "issues");
                });

            modelBuilder.Entity("atlas_the_public_think_tank.Data.DatabaseEntities.Content.Issue.IssueVote", b =>
                {
                    b.Property<Guid>("VoteID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("AppUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("IssueID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("UserID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("VoteValue")
                        .HasColumnType("int");

                    b.HasKey("VoteID");

                    b.HasIndex("AppUserId");

                    b.HasIndex("UserID");

                    b.HasIndex("IssueID", "UserID")
                        .IsUnique();

                    b.ToTable("IssueVotes", "issues", t =>
                        {
                            t.HasCheckConstraint("CK_IssueVote_VoteValue_Range", "[VoteValue] >= 0 AND [VoteValue] <= 10");
                        });
                });

            modelBuilder.Entity("atlas_the_public_think_tank.Data.DatabaseEntities.Content.Solution.Solution", b =>
                {
                    b.Property<Guid>("SolutionID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AuthorID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("BlockedContentID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ContentStatus")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("ParentIssueID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("PeriodEnd")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime2")
                        .HasColumnName("PeriodEnd");

                    b.Property<DateTime>("PeriodStart")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime2")
                        .HasColumnName("PeriodStart");

                    b.Property<int?>("RANK")
                        .HasColumnType("int");

                    b.Property<Guid?>("ScopeID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.HasKey("SolutionID");

                    b.HasIndex("AuthorID");

                    b.HasIndex("BlockedContentID");

                    b.HasIndex("ParentIssueID");

                    b.HasIndex("ScopeID");

                    b.ToTable("Solutions", "solutions");

                    b.ToTable(tb => tb.IsTemporal(ttb =>
                            {
                                ttb.UseHistoryTable("SolutionsHistory", "solutions");
                                ttb
                                    .HasPeriodStart("PeriodStart")
                                    .HasColumnName("PeriodStart");
                                ttb
                                    .HasPeriodEnd("PeriodEnd")
                                    .HasColumnName("PeriodEnd");
                            }));
                });

            modelBuilder.Entity("atlas_the_public_think_tank.Data.DatabaseEntities.Content.Solution.SolutionTag", b =>
                {
                    b.Property<Guid>("TagID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("SolutionID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("TagName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("TagID", "SolutionID");

                    b.HasIndex("SolutionID");

                    b.ToTable("SolutionsTags", "solutions");
                });

            modelBuilder.Entity("atlas_the_public_think_tank.Data.DatabaseEntities.Content.Solution.SolutionVote", b =>
                {
                    b.Property<Guid>("VoteID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("AppUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("SolutionID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UserID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("VoteValue")
                        .HasColumnType("int");

                    b.HasKey("VoteID");

                    b.HasIndex("AppUserId");

                    b.HasIndex("UserID");

                    b.HasIndex("SolutionID", "UserID")
                        .IsUnique();

                    b.ToTable("SolutionVotes", "solutions", t =>
                        {
                            t.HasCheckConstraint("CK_SolutionVote_VoteValue_Range", "[VoteValue] >= 0 AND [VoteValue] <= 10");
                        });
                });

            modelBuilder.Entity("atlas_the_public_think_tank.Data.DatabaseEntities.History.UserHistory", b =>
                {
                    b.Property<Guid>("UserHistoryID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Action")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<Guid?>("CommentID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("IssueID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Link")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<Guid?>("SolutionID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("Timestamp")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<Guid>("UserID")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("UserHistoryID");

                    b.HasIndex("CommentID");

                    b.HasIndex("IssueID");

                    b.HasIndex("SolutionID");

                    b.HasIndex("UserID");

                    b.ToTable("UserHistory", "users");
                });

            modelBuilder.Entity("atlas_the_public_think_tank.Data.DatabaseEntities.Moderation.BlockedContent", b =>
                {
                    b.Property<Guid>("BlockedContentID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<short?>("ReasonID")
                        .HasColumnType("smallint");

                    b.HasKey("BlockedContentID");

                    b.ToTable("BlockedContent", "app");
                });

            modelBuilder.Entity("atlas_the_public_think_tank.Data.DatabaseEntities.Users.AppUser", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.HasOne("atlas_the_public_think_tank.Data.DatabaseEntities.Users.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.HasOne("atlas_the_public_think_tank.Data.DatabaseEntities.Users.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("atlas_the_public_think_tank.Data.DatabaseEntities.Users.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.HasOne("atlas_the_public_think_tank.Data.DatabaseEntities.Users.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("atlas_the_public_think_tank.Data.DatabaseEntities.Content.Comment.Comment", b =>
                {
                    b.HasOne("atlas_the_public_think_tank.Data.DatabaseEntities.Users.AppUser", "Author")
                        .WithMany("Comments")
                        .HasForeignKey("AuthorID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("atlas_the_public_think_tank.Data.DatabaseEntities.Moderation.BlockedContent", "BlockedContent")
                        .WithMany("Comments")
                        .HasForeignKey("BlockedContentID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("atlas_the_public_think_tank.Data.DatabaseEntities.Content.Issue.Issue", "Issue")
                        .WithMany("Comments")
                        .HasForeignKey("IssueID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("atlas_the_public_think_tank.Data.DatabaseEntities.Content.Comment.Comment", "ParentComment")
                        .WithMany("ChildComments")
                        .HasForeignKey("ParentCommentID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("atlas_the_public_think_tank.Data.DatabaseEntities.Content.Solution.Solution", "Solution")
                        .WithMany("Comments")
                        .HasForeignKey("SolutionID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Author");

                    b.Navigation("BlockedContent");

                    b.Navigation("Issue");

                    b.Navigation("ParentComment");

                    b.Navigation("Solution");
                });

            modelBuilder.Entity("atlas_the_public_think_tank.Data.DatabaseEntities.Content.Comment.CommentVote", b =>
                {
                    b.HasOne("atlas_the_public_think_tank.Data.DatabaseEntities.Users.AppUser", null)
                        .WithMany("CommentVotes")
                        .HasForeignKey("AppUserId");

                    b.HasOne("atlas_the_public_think_tank.Data.DatabaseEntities.Content.Comment.Comment", "Comment")
                        .WithMany("CommentVotes")
                        .HasForeignKey("CommentID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("atlas_the_public_think_tank.Data.DatabaseEntities.Users.AppUser", "User")
                        .WithMany()
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Comment");

                    b.Navigation("User");
                });

            modelBuilder.Entity("atlas_the_public_think_tank.Data.DatabaseEntities.Content.Issue.Issue", b =>
                {
                    b.HasOne("atlas_the_public_think_tank.Data.DatabaseEntities.Users.AppUser", "Author")
                        .WithMany("Issues")
                        .HasForeignKey("AuthorID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("atlas_the_public_think_tank.Data.DatabaseEntities.Moderation.BlockedContent", "BlockedContent")
                        .WithMany("Issues")
                        .HasForeignKey("BlockedContentID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("atlas_the_public_think_tank.Data.DatabaseEntities.Content.Issue.Issue", "ParentIssue")
                        .WithMany("ChildIssues")
                        .HasForeignKey("ParentIssueID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("atlas_the_public_think_tank.Data.DatabaseEntities.Content.Solution.Solution", "ParentSolution")
                        .WithMany()
                        .HasForeignKey("ParentSolutionID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("atlas_the_public_think_tank.Data.DatabaseEntities.Content.Common.Scope", "Scope")
                        .WithMany()
                        .HasForeignKey("ScopeID");

                    b.HasOne("atlas_the_public_think_tank.Data.DatabaseEntities.Content.Solution.Solution", null)
                        .WithMany("ChildIssues")
                        .HasForeignKey("SolutionID");

                    b.Navigation("Author");

                    b.Navigation("BlockedContent");

                    b.Navigation("ParentIssue");

                    b.Navigation("ParentSolution");

                    b.Navigation("Scope");
                });

            modelBuilder.Entity("atlas_the_public_think_tank.Data.DatabaseEntities.Content.Issue.IssueTag", b =>
                {
                    b.HasOne("atlas_the_public_think_tank.Data.DatabaseEntities.Content.Issue.Issue", null)
                        .WithMany("IssueTags")
                        .HasForeignKey("IssueID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("atlas_the_public_think_tank.Data.DatabaseEntities.Content.Issue.IssueVote", b =>
                {
                    b.HasOne("atlas_the_public_think_tank.Data.DatabaseEntities.Users.AppUser", null)
                        .WithMany("IssueVotes")
                        .HasForeignKey("AppUserId");

                    b.HasOne("atlas_the_public_think_tank.Data.DatabaseEntities.Content.Issue.Issue", "Issue")
                        .WithMany("IssueVotes")
                        .HasForeignKey("IssueID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("atlas_the_public_think_tank.Data.DatabaseEntities.Users.AppUser", "User")
                        .WithMany()
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Issue");

                    b.Navigation("User");
                });

            modelBuilder.Entity("atlas_the_public_think_tank.Data.DatabaseEntities.Content.Solution.Solution", b =>
                {
                    b.HasOne("atlas_the_public_think_tank.Data.DatabaseEntities.Users.AppUser", "Author")
                        .WithMany("Solutions")
                        .HasForeignKey("AuthorID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("atlas_the_public_think_tank.Data.DatabaseEntities.Moderation.BlockedContent", "BlockedContent")
                        .WithMany("Solutions")
                        .HasForeignKey("BlockedContentID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("atlas_the_public_think_tank.Data.DatabaseEntities.Content.Issue.Issue", "ParentIssue")
                        .WithMany("Solutions")
                        .HasForeignKey("ParentIssueID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("atlas_the_public_think_tank.Data.DatabaseEntities.Content.Common.Scope", "Scope")
                        .WithMany()
                        .HasForeignKey("ScopeID");

                    b.Navigation("Author");

                    b.Navigation("BlockedContent");

                    b.Navigation("ParentIssue");

                    b.Navigation("Scope");
                });

            modelBuilder.Entity("atlas_the_public_think_tank.Data.DatabaseEntities.Content.Solution.SolutionTag", b =>
                {
                    b.HasOne("atlas_the_public_think_tank.Data.DatabaseEntities.Content.Solution.Solution", null)
                        .WithMany("SolutionTags")
                        .HasForeignKey("SolutionID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("atlas_the_public_think_tank.Data.DatabaseEntities.Content.Solution.SolutionVote", b =>
                {
                    b.HasOne("atlas_the_public_think_tank.Data.DatabaseEntities.Users.AppUser", null)
                        .WithMany("SolutionVotes")
                        .HasForeignKey("AppUserId");

                    b.HasOne("atlas_the_public_think_tank.Data.DatabaseEntities.Content.Solution.Solution", "Solution")
                        .WithMany("SolutionVotes")
                        .HasForeignKey("SolutionID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("atlas_the_public_think_tank.Data.DatabaseEntities.Users.AppUser", "User")
                        .WithMany()
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Solution");

                    b.Navigation("User");
                });

            modelBuilder.Entity("atlas_the_public_think_tank.Data.DatabaseEntities.History.UserHistory", b =>
                {
                    b.HasOne("atlas_the_public_think_tank.Data.DatabaseEntities.Content.Comment.Comment", "Comment")
                        .WithMany()
                        .HasForeignKey("CommentID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("atlas_the_public_think_tank.Data.DatabaseEntities.Content.Issue.Issue", "Issue")
                        .WithMany()
                        .HasForeignKey("IssueID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("atlas_the_public_think_tank.Data.DatabaseEntities.Content.Solution.Solution", "Solution")
                        .WithMany()
                        .HasForeignKey("SolutionID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("atlas_the_public_think_tank.Data.DatabaseEntities.Users.AppUser", "User")
                        .WithMany("UserHistory")
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Comment");

                    b.Navigation("Issue");

                    b.Navigation("Solution");

                    b.Navigation("User");
                });

            modelBuilder.Entity("atlas_the_public_think_tank.Data.DatabaseEntities.Content.Comment.Comment", b =>
                {
                    b.Navigation("ChildComments");

                    b.Navigation("CommentVotes");
                });

            modelBuilder.Entity("atlas_the_public_think_tank.Data.DatabaseEntities.Content.Issue.Issue", b =>
                {
                    b.Navigation("ChildIssues");

                    b.Navigation("Comments");

                    b.Navigation("IssueTags");

                    b.Navigation("IssueVotes");

                    b.Navigation("Solutions");
                });

            modelBuilder.Entity("atlas_the_public_think_tank.Data.DatabaseEntities.Content.Solution.Solution", b =>
                {
                    b.Navigation("ChildIssues");

                    b.Navigation("Comments");

                    b.Navigation("SolutionTags");

                    b.Navigation("SolutionVotes");
                });

            modelBuilder.Entity("atlas_the_public_think_tank.Data.DatabaseEntities.Moderation.BlockedContent", b =>
                {
                    b.Navigation("Comments");

                    b.Navigation("Issues");

                    b.Navigation("Solutions");
                });

            modelBuilder.Entity("atlas_the_public_think_tank.Data.DatabaseEntities.Users.AppUser", b =>
                {
                    b.Navigation("CommentVotes");

                    b.Navigation("Comments");

                    b.Navigation("IssueVotes");

                    b.Navigation("Issues");

                    b.Navigation("SolutionVotes");

                    b.Navigation("Solutions");

                    b.Navigation("UserHistory");
                });
#pragma warning restore 612, 618
        }
    }
}
