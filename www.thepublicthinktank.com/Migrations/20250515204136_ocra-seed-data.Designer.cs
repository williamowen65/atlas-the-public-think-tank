// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using atlas_the_public_think_tank.Data;

#nullable disable

namespace atlas_the_public_think_tank.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250515204136_ocra-seed-data")]
    partial class ocraseeddata
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("atlas_the_public_think_tank.Models.AppUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "1a61454c-5b83-4aab-8661-96d6dffbee30",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "a1b2c3d4-e5f6-7890-abcd-ef1234567890",
                            Email = "whoLetTheDogsOut@barker.com",
                            EmailConfirmed = true,
                            LockoutEnabled = true,
                            NormalizedEmail = "WHOLETTHEDOGSOUT@BARKER.COM",
                            NormalizedUserName = "COOPER.BARKER",
                            PasswordHash = "AQAAAAEAACcQAAAAEExamplePasswordHash==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "d12ef04d-5b83-4aab-8661-567ffb12e15",
                            TwoFactorEnabled = false,
                            UserName = "Cooper.Barker"
                        },
                        new
                        {
                            Id = "1a61454c-5b83-4aab-8661-96d6dffbe31",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "a1b2c3e4-e5f6-7890-acsd-ef1234567891",
                            Email = "amelia.knight@example.org",
                            EmailConfirmed = true,
                            LockoutEnabled = true,
                            NormalizedEmail = "AMELIA.KNIGHT@EXAMPLE.ORG",
                            NormalizedUserName = "AMELIA.KNIGHT",
                            PasswordHash = "AQAAAAEAACcQAAAAEExamplePasswordHash==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "d12ef04d-5b83-4aab-8661-567ffb12e11",
                            TwoFactorEnabled = false,
                            UserName = "amelia.knight"
                        });
                });

            modelBuilder.Entity("atlas_the_public_think_tank.Models.BlockedContent", b =>
                {
                    b.Property<int>("BlockedContentID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("BlockedContentID"));

                    b.Property<short?>("ReasonID")
                        .HasColumnType("smallint");

                    b.HasKey("BlockedContentID");

                    b.ToTable("BlockedContent", "issues");
                });

            modelBuilder.Entity("atlas_the_public_think_tank.Models.Category", b =>
                {
                    b.Property<int>("CategoryID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CategoryID"));

                    b.Property<string>("CategoryName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CategoryID");

                    b.ToTable("Categories", "issues");

                    b.HasData(
                        new
                        {
                            CategoryID = 1,
                            CategoryName = "Global Cooperation"
                        },
                        new
                        {
                            CategoryID = 2,
                            CategoryName = "Sustainable Development"
                        },
                        new
                        {
                            CategoryID = 3,
                            CategoryName = "Equitable Access"
                        },
                        new
                        {
                            CategoryID = 4,
                            CategoryName = "Innovation and Technology"
                        },
                        new
                        {
                            CategoryID = 5,
                            CategoryName = "Effective Governance"
                        },
                        new
                        {
                            CategoryID = 6,
                            CategoryName = "Education and Awareness"
                        },
                        new
                        {
                            CategoryID = 7,
                            CategoryName = "Cultural Understanding"
                        },
                        new
                        {
                            CategoryID = 8,
                            CategoryName = "Resilience and Adaptability"
                        });
                });

            modelBuilder.Entity("atlas_the_public_think_tank.Models.Issue", b =>
                {
                    b.Property<int>("IssueID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IssueID"));

                    b.Property<string>("AuthorID")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int?>("BlockedContentID")
                        .HasColumnType("int");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ContentStatus")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("ParentIssueID")
                        .HasColumnType("int");

                    b.Property<int>("ScopeID")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("IssueID");

                    b.HasIndex("AuthorID");

                    b.HasIndex("BlockedContentID");

                    b.HasIndex("ParentIssueID");

                    b.HasIndex("ScopeID");

                    b.ToTable("Issues", "issues");

                    b.HasData(
                        new
                        {
                            IssueID = 1,
                            AuthorID = "1a61454c-5b83-4aab-8661-96d6dffbee30",
                            Content = "A issue to discuss practical solutions to climate change at individual and policy levels.",
                            ContentStatus = 1,
                            CreatedAt = new DateTime(2024, 1, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ScopeID = 1,
                            Title = "Climate Change Solutions"
                        },
                        new
                        {
                            IssueID = 2,
                            AuthorID = "1a61454c-5b83-4aab-8661-96d6dffbee30",
                            Content = "Discussion on modern urban planning approaches for sustainable and livable cities.",
                            ContentStatus = 1,
                            CreatedAt = new DateTime(2024, 2, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ScopeID = 2,
                            Title = "Urban Planning Innovations"
                        },
                        new
                        {
                            IssueID = 3,
                            AuthorID = "1a61454c-5b83-4aab-8661-96d6dffbe31",
                            Content = "Strategies for transitioning to renewable energy sources at community and national levels.",
                            ContentStatus = 1,
                            CreatedAt = new DateTime(2024, 3, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ModifiedAt = new DateTime(2024, 3, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ParentIssueID = 1,
                            ScopeID = 1,
                            Title = "Renewable Energy Transition"
                        },
                        new
                        {
                            IssueID = 4,
                            AuthorID = "1a61454c-5b83-4aab-8661-96d6dffbe31",
                            Content = "The world is experiencing a biodiversity crisis, with thousands of species teetering on the edge of extinction.",
                            ContentStatus = 1,
                            CreatedAt = new DateTime(2024, 4, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ScopeID = 1,
                            Title = "Critical Decline of Endangered Species"
                        },
                        new
                        {
                            IssueID = 5,
                            AuthorID = "1a61454c-5b83-4aab-8661-96d6dffbe31",
                            Content = "This decline is attributed to a combination of factors, including reduced prey availability, pollution, and vessel traffic.",
                            ContentStatus = 1,
                            CreatedAt = new DateTime(2024, 5, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ScopeID = 2,
                            Title = "The Southern Resident orca population has dropped from 88 individuals in 2010 to just 74 as of late 2024"
                        });
                });

            modelBuilder.Entity("atlas_the_public_think_tank.Models.IssueCategory", b =>
                {
                    b.Property<int>("CategoryID")
                        .HasColumnType("int");

                    b.Property<int>("IssueID")
                        .HasColumnType("int");

                    b.HasKey("CategoryID", "IssueID");

                    b.HasIndex("IssueID");

                    b.ToTable("IssuesCategories", "issues");

                    b.HasData(
                        new
                        {
                            CategoryID = 1,
                            IssueID = 1
                        },
                        new
                        {
                            CategoryID = 2,
                            IssueID = 1
                        },
                        new
                        {
                            CategoryID = 8,
                            IssueID = 1
                        },
                        new
                        {
                            CategoryID = 2,
                            IssueID = 2
                        },
                        new
                        {
                            CategoryID = 4,
                            IssueID = 2
                        },
                        new
                        {
                            CategoryID = 5,
                            IssueID = 2
                        },
                        new
                        {
                            CategoryID = 1,
                            IssueID = 3
                        },
                        new
                        {
                            CategoryID = 2,
                            IssueID = 3
                        },
                        new
                        {
                            CategoryID = 4,
                            IssueID = 3
                        });
                });

            modelBuilder.Entity("atlas_the_public_think_tank.Models.Scope", b =>
                {
                    b.Property<int>("ScopeID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ScopeID"));

                    b.Property<string>("ScopeName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ScopeID");

                    b.ToTable("Scopes", "issues");

                    b.HasData(
                        new
                        {
                            ScopeID = 1,
                            ScopeName = "Global"
                        },
                        new
                        {
                            ScopeID = 2,
                            ScopeName = "National"
                        },
                        new
                        {
                            ScopeID = 3,
                            ScopeName = "Local"
                        },
                        new
                        {
                            ScopeID = 4,
                            ScopeName = "Individual"
                        });
                });

            modelBuilder.Entity("atlas_the_public_think_tank.Models.Solution", b =>
                {
                    b.Property<int>("SolutionID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SolutionID"));

                    b.Property<string>("AuthorID")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int?>("BlockedContentID")
                        .HasColumnType("int");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ContentStatus")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("IssueID")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.HasKey("SolutionID");

                    b.HasIndex("AuthorID");

                    b.HasIndex("BlockedContentID");

                    b.HasIndex("IssueID");

                    b.ToTable("Solutions", "issues");
                });

            modelBuilder.Entity("atlas_the_public_think_tank.Models.UserComment", b =>
                {
                    b.Property<int>("CommentID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CommentID"));

                    b.Property<string>("AuthorID")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int?>("BlockedContentID")
                        .HasColumnType("int");

                    b.Property<string>("Comment")
                        .IsRequired()
                        .HasMaxLength(3000)
                        .HasColumnType("nvarchar(3000)");

                    b.Property<int>("ContentStatus")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("IssueID")
                        .HasColumnType("int");

                    b.Property<int?>("IssueSolutionID")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("ParentCommentID")
                        .HasColumnType("int");

                    b.HasKey("CommentID");

                    b.HasIndex("AuthorID");

                    b.HasIndex("BlockedContentID");

                    b.HasIndex("IssueID");

                    b.HasIndex("IssueSolutionID");

                    b.HasIndex("ParentCommentID");

                    b.ToTable("Comments", "issues");
                });

            modelBuilder.Entity("atlas_the_public_think_tank.Models.UserHistory", b =>
                {
                    b.Property<int>("UserHistoryID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserHistoryID"));

                    b.Property<string>("Action")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int?>("CommentID")
                        .HasColumnType("int");

                    b.Property<int?>("IssueID")
                        .HasColumnType("int");

                    b.Property<int?>("IssueSolutionID")
                        .HasColumnType("int");

                    b.Property<string>("Link")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime>("Timestamp")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<string>("UserID")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int?>("UserVote")
                        .HasColumnType("int");

                    b.HasKey("UserHistoryID");

                    b.HasIndex("CommentID");

                    b.HasIndex("IssueID");

                    b.HasIndex("IssueSolutionID");

                    b.HasIndex("UserID");

                    b.ToTable("UserHistory", "users");
                });

            modelBuilder.Entity("atlas_the_public_think_tank.Models.UserVote", b =>
                {
                    b.Property<int>("VoteID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("VoteID"));

                    b.Property<int?>("CommentID")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasMaxLength(13)
                        .HasColumnType("nvarchar(13)");

                    b.Property<int?>("IssueID")
                        .HasColumnType("int");

                    b.Property<int?>("IssueSolutionID")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("SolutionID")
                        .HasColumnType("int");

                    b.Property<int?>("UserCommentCommentID")
                        .HasColumnType("int");

                    b.Property<string>("UserID")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("VoteValue")
                        .HasColumnType("int");

                    b.HasKey("VoteID");

                    b.HasIndex("IssueID");

                    b.HasIndex("SolutionID");

                    b.HasIndex("UserCommentCommentID");

                    b.HasIndex("UserID");

                    b.ToTable("UserVotes", "issues");

                    b.HasDiscriminator().HasValue("UserVote");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("atlas_the_public_think_tank.Models.CommentVote", b =>
                {
                    b.HasBaseType("atlas_the_public_think_tank.Models.UserVote");

                    b.HasDiscriminator().HasValue("CommentVote");
                });

            modelBuilder.Entity("atlas_the_public_think_tank.Models.IssueVote", b =>
                {
                    b.HasBaseType("atlas_the_public_think_tank.Models.UserVote");

                    b.HasDiscriminator().HasValue("IssueVote");
                });

            modelBuilder.Entity("atlas_the_public_think_tank.Models.SolutionVote", b =>
                {
                    b.HasBaseType("atlas_the_public_think_tank.Models.UserVote");

                    b.HasDiscriminator().HasValue("SolutionVote");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("atlas_the_public_think_tank.Models.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("atlas_the_public_think_tank.Models.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("atlas_the_public_think_tank.Models.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("atlas_the_public_think_tank.Models.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("atlas_the_public_think_tank.Models.Issue", b =>
                {
                    b.HasOne("atlas_the_public_think_tank.Models.AppUser", "Author")
                        .WithMany("Issues")
                        .HasForeignKey("AuthorID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("atlas_the_public_think_tank.Models.BlockedContent", "BlockedContent")
                        .WithMany("Issues")
                        .HasForeignKey("BlockedContentID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("atlas_the_public_think_tank.Models.Issue", "ParentIssue")
                        .WithMany("ChildIssues")
                        .HasForeignKey("ParentIssueID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("atlas_the_public_think_tank.Models.Scope", "Scope")
                        .WithMany("Issues")
                        .HasForeignKey("ScopeID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Author");

                    b.Navigation("BlockedContent");

                    b.Navigation("ParentIssue");

                    b.Navigation("Scope");
                });

            modelBuilder.Entity("atlas_the_public_think_tank.Models.IssueCategory", b =>
                {
                    b.HasOne("atlas_the_public_think_tank.Models.Category", "Category")
                        .WithMany("IssueCategories")
                        .HasForeignKey("CategoryID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("atlas_the_public_think_tank.Models.Issue", "Issue")
                        .WithMany("IssueCategories")
                        .HasForeignKey("IssueID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("Issue");
                });

            modelBuilder.Entity("atlas_the_public_think_tank.Models.Solution", b =>
                {
                    b.HasOne("atlas_the_public_think_tank.Models.AppUser", "Author")
                        .WithMany("Solutions")
                        .HasForeignKey("AuthorID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("atlas_the_public_think_tank.Models.BlockedContent", "BlockedContent")
                        .WithMany("Solutions")
                        .HasForeignKey("BlockedContentID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("atlas_the_public_think_tank.Models.Issue", "Issue")
                        .WithMany("Solutions")
                        .HasForeignKey("IssueID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Author");

                    b.Navigation("BlockedContent");

                    b.Navigation("Issue");
                });

            modelBuilder.Entity("atlas_the_public_think_tank.Models.UserComment", b =>
                {
                    b.HasOne("atlas_the_public_think_tank.Models.AppUser", "Author")
                        .WithMany("Comments")
                        .HasForeignKey("AuthorID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("atlas_the_public_think_tank.Models.BlockedContent", "BlockedContent")
                        .WithMany("Comments")
                        .HasForeignKey("BlockedContentID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("atlas_the_public_think_tank.Models.Issue", "Issue")
                        .WithMany("Comments")
                        .HasForeignKey("IssueID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("atlas_the_public_think_tank.Models.Solution", "Solution")
                        .WithMany("Comments")
                        .HasForeignKey("IssueSolutionID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("atlas_the_public_think_tank.Models.UserComment", "ParentComment")
                        .WithMany("ChildComments")
                        .HasForeignKey("ParentCommentID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Author");

                    b.Navigation("BlockedContent");

                    b.Navigation("Issue");

                    b.Navigation("ParentComment");

                    b.Navigation("Solution");
                });

            modelBuilder.Entity("atlas_the_public_think_tank.Models.UserHistory", b =>
                {
                    b.HasOne("atlas_the_public_think_tank.Models.UserComment", "Comment")
                        .WithMany()
                        .HasForeignKey("CommentID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("atlas_the_public_think_tank.Models.Issue", "Issue")
                        .WithMany()
                        .HasForeignKey("IssueID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("atlas_the_public_think_tank.Models.Solution", "Solution")
                        .WithMany()
                        .HasForeignKey("IssueSolutionID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("atlas_the_public_think_tank.Models.AppUser", "User")
                        .WithMany("UserHistory")
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Comment");

                    b.Navigation("Issue");

                    b.Navigation("Solution");

                    b.Navigation("User");
                });

            modelBuilder.Entity("atlas_the_public_think_tank.Models.UserVote", b =>
                {
                    b.HasOne("atlas_the_public_think_tank.Models.Issue", null)
                        .WithMany("UserVotes")
                        .HasForeignKey("IssueID");

                    b.HasOne("atlas_the_public_think_tank.Models.Solution", null)
                        .WithMany("UserVotes")
                        .HasForeignKey("SolutionID");

                    b.HasOne("atlas_the_public_think_tank.Models.UserComment", null)
                        .WithMany("UserVotes")
                        .HasForeignKey("UserCommentCommentID");

                    b.HasOne("atlas_the_public_think_tank.Models.AppUser", "User")
                        .WithMany("UserVotes")
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("atlas_the_public_think_tank.Models.AppUser", b =>
                {
                    b.Navigation("Comments");

                    b.Navigation("Issues");

                    b.Navigation("Solutions");

                    b.Navigation("UserHistory");

                    b.Navigation("UserVotes");
                });

            modelBuilder.Entity("atlas_the_public_think_tank.Models.BlockedContent", b =>
                {
                    b.Navigation("Comments");

                    b.Navigation("Issues");

                    b.Navigation("Solutions");
                });

            modelBuilder.Entity("atlas_the_public_think_tank.Models.Category", b =>
                {
                    b.Navigation("IssueCategories");
                });

            modelBuilder.Entity("atlas_the_public_think_tank.Models.Issue", b =>
                {
                    b.Navigation("ChildIssues");

                    b.Navigation("Comments");

                    b.Navigation("IssueCategories");

                    b.Navigation("Solutions");

                    b.Navigation("UserVotes");
                });

            modelBuilder.Entity("atlas_the_public_think_tank.Models.Scope", b =>
                {
                    b.Navigation("Issues");
                });

            modelBuilder.Entity("atlas_the_public_think_tank.Models.Solution", b =>
                {
                    b.Navigation("Comments");

                    b.Navigation("UserVotes");
                });

            modelBuilder.Entity("atlas_the_public_think_tank.Models.UserComment", b =>
                {
                    b.Navigation("ChildComments");

                    b.Navigation("UserVotes");
                });
#pragma warning restore 612, 618
        }
    }
}
