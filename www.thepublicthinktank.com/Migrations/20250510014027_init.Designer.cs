// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using atlas_the_public_think_tank.Data;

#nullable disable

namespace atlas_the_public_think_tank.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250510014027_init")]
    partial class init
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("atlas_the_public_think_tank.Models.AppUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("atlas_the_public_think_tank.Models.BlockedContent", b =>
                {
                    b.Property<int>("BlockedContentID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("BlockedContentID"));

                    b.Property<short?>("ReasonID")
                        .HasColumnType("smallint");

                    b.HasKey("BlockedContentID");

                    b.ToTable("BlockedContent", "forums");
                });

            modelBuilder.Entity("atlas_the_public_think_tank.Models.Category", b =>
                {
                    b.Property<int>("CategoryID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CategoryID"));

                    b.Property<string>("CategoryName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CategoryID");

                    b.ToTable("Categories", "forums");
                });

            modelBuilder.Entity("atlas_the_public_think_tank.Models.Forum", b =>
                {
                    b.Property<int>("ForumID")
                        .HasColumnType("int");

                    b.Property<string>("AuthorID")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int?>("BlockedContentID")
                        .HasColumnType("int");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ContentStatus")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("ParentForumID")
                        .HasColumnType("int");

                    b.Property<int>("ScopeID")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("ForumID");

                    b.HasIndex("AuthorID");

                    b.HasIndex("BlockedContentID");

                    b.HasIndex("ParentForumID");

                    b.HasIndex("ScopeID");

                    b.ToTable("Forums", "forums");
                });

            modelBuilder.Entity("atlas_the_public_think_tank.Models.ForumCategory", b =>
                {
                    b.Property<int>("CategoryID")
                        .HasColumnType("int");

                    b.Property<int>("ForumID")
                        .HasColumnType("int");

                    b.HasKey("CategoryID", "ForumID");

                    b.HasIndex("ForumID");

                    b.ToTable("ForumsCategories", "forums");
                });

            modelBuilder.Entity("atlas_the_public_think_tank.Models.Scope", b =>
                {
                    b.Property<int>("ScopeID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ScopeID"));

                    b.Property<string>("ScopeName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ScopeID");

                    b.ToTable("Scopes", "forums");
                });

            modelBuilder.Entity("atlas_the_public_think_tank.Models.Solution", b =>
                {
                    b.Property<int>("SolutionID")
                        .HasColumnType("int");

                    b.Property<string>("AuthorID")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int?>("BlockedContentID")
                        .HasColumnType("int");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ContentStatus")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("ForumID")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.HasKey("SolutionID");

                    b.HasIndex("AuthorID");

                    b.HasIndex("BlockedContentID");

                    b.HasIndex("ForumID");

                    b.ToTable("Solutions", "forums");
                });

            modelBuilder.Entity("atlas_the_public_think_tank.Models.UserComment", b =>
                {
                    b.Property<int>("CommentID")
                        .HasColumnType("int");

                    b.Property<string>("AuthorID")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int?>("BlockedContentID")
                        .HasColumnType("int");

                    b.Property<string>("Comment")
                        .IsRequired()
                        .HasMaxLength(3000)
                        .HasColumnType("nvarchar(3000)");

                    b.Property<int>("ContentStatus")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("ForumID")
                        .HasColumnType("int");

                    b.Property<int?>("ForumSolutionID")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("ParentCommentID")
                        .HasColumnType("int");

                    b.HasKey("CommentID");

                    b.HasIndex("AuthorID");

                    b.HasIndex("BlockedContentID");

                    b.HasIndex("ForumID");

                    b.HasIndex("ForumSolutionID");

                    b.HasIndex("ParentCommentID");

                    b.ToTable("Comments", "forums");
                });

            modelBuilder.Entity("atlas_the_public_think_tank.Models.UserHistory", b =>
                {
                    b.Property<int>("UserHistoryID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserHistoryID"));

                    b.Property<string>("Action")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int?>("CommentID")
                        .HasColumnType("int");

                    b.Property<int?>("ForumID")
                        .HasColumnType("int");

                    b.Property<int?>("ForumSolutionID")
                        .HasColumnType("int");

                    b.Property<string>("Link")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime>("Timestamp")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<string>("UserID")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int?>("UserVote")
                        .HasColumnType("int");

                    b.HasKey("UserHistoryID");

                    b.HasIndex("CommentID");

                    b.HasIndex("ForumID");

                    b.HasIndex("ForumSolutionID");

                    b.HasIndex("UserID");

                    b.ToTable("UserHistory", "users");
                });

            modelBuilder.Entity("atlas_the_public_think_tank.Models.UserVote", b =>
                {
                    b.Property<string>("UserID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("ForumID")
                        .HasColumnType("int");

                    b.Property<int>("ForumSolutionID")
                        .HasColumnType("int");

                    b.Property<int>("CommentID")
                        .HasColumnType("int");

                    b.Property<int>("Vote")
                        .HasColumnType("int");

                    b.HasKey("UserID", "ForumID", "ForumSolutionID", "CommentID");

                    b.HasIndex("CommentID");

                    b.HasIndex("ForumID");

                    b.HasIndex("ForumSolutionID");

                    b.ToTable("UserVotes", "forums");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("atlas_the_public_think_tank.Models.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("atlas_the_public_think_tank.Models.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("atlas_the_public_think_tank.Models.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("atlas_the_public_think_tank.Models.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("atlas_the_public_think_tank.Models.Forum", b =>
                {
                    b.HasOne("atlas_the_public_think_tank.Models.AppUser", "Author")
                        .WithMany("Forums")
                        .HasForeignKey("AuthorID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("atlas_the_public_think_tank.Models.BlockedContent", "BlockedContent")
                        .WithMany("Forums")
                        .HasForeignKey("BlockedContentID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("atlas_the_public_think_tank.Models.Forum", "ParentForum")
                        .WithMany("ChildForums")
                        .HasForeignKey("ParentForumID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("atlas_the_public_think_tank.Models.Scope", "Scope")
                        .WithMany("Forums")
                        .HasForeignKey("ScopeID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Author");

                    b.Navigation("BlockedContent");

                    b.Navigation("ParentForum");

                    b.Navigation("Scope");
                });

            modelBuilder.Entity("atlas_the_public_think_tank.Models.ForumCategory", b =>
                {
                    b.HasOne("atlas_the_public_think_tank.Models.Category", "Category")
                        .WithMany("ForumCategories")
                        .HasForeignKey("CategoryID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("atlas_the_public_think_tank.Models.Forum", "Forum")
                        .WithMany("ForumCategories")
                        .HasForeignKey("ForumID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("Forum");
                });

            modelBuilder.Entity("atlas_the_public_think_tank.Models.Solution", b =>
                {
                    b.HasOne("atlas_the_public_think_tank.Models.AppUser", "Author")
                        .WithMany("Solutions")
                        .HasForeignKey("AuthorID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("atlas_the_public_think_tank.Models.BlockedContent", "BlockedContent")
                        .WithMany("Solutions")
                        .HasForeignKey("BlockedContentID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("atlas_the_public_think_tank.Models.Forum", "Forum")
                        .WithMany("Solutions")
                        .HasForeignKey("ForumID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Author");

                    b.Navigation("BlockedContent");

                    b.Navigation("Forum");
                });

            modelBuilder.Entity("atlas_the_public_think_tank.Models.UserComment", b =>
                {
                    b.HasOne("atlas_the_public_think_tank.Models.AppUser", "Author")
                        .WithMany("Comments")
                        .HasForeignKey("AuthorID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("atlas_the_public_think_tank.Models.BlockedContent", "BlockedContent")
                        .WithMany("Comments")
                        .HasForeignKey("BlockedContentID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("atlas_the_public_think_tank.Models.Forum", "Forum")
                        .WithMany("Comments")
                        .HasForeignKey("ForumID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("atlas_the_public_think_tank.Models.Solution", "Solution")
                        .WithMany("Comments")
                        .HasForeignKey("ForumSolutionID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("atlas_the_public_think_tank.Models.UserComment", "ParentComment")
                        .WithMany("ChildComments")
                        .HasForeignKey("ParentCommentID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Author");

                    b.Navigation("BlockedContent");

                    b.Navigation("Forum");

                    b.Navigation("ParentComment");

                    b.Navigation("Solution");
                });

            modelBuilder.Entity("atlas_the_public_think_tank.Models.UserHistory", b =>
                {
                    b.HasOne("atlas_the_public_think_tank.Models.UserComment", "Comment")
                        .WithMany()
                        .HasForeignKey("CommentID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("atlas_the_public_think_tank.Models.Forum", "Forum")
                        .WithMany()
                        .HasForeignKey("ForumID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("atlas_the_public_think_tank.Models.Solution", "Solution")
                        .WithMany()
                        .HasForeignKey("ForumSolutionID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("atlas_the_public_think_tank.Models.AppUser", "User")
                        .WithMany("UserHistory")
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Comment");

                    b.Navigation("Forum");

                    b.Navigation("Solution");

                    b.Navigation("User");
                });

            modelBuilder.Entity("atlas_the_public_think_tank.Models.UserVote", b =>
                {
                    b.HasOne("atlas_the_public_think_tank.Models.UserComment", "Comment")
                        .WithMany("UserVotes")
                        .HasForeignKey("CommentID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("atlas_the_public_think_tank.Models.Forum", "Forum")
                        .WithMany("UserVotes")
                        .HasForeignKey("ForumID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("atlas_the_public_think_tank.Models.Solution", "Solution")
                        .WithMany("UserVotes")
                        .HasForeignKey("ForumSolutionID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("atlas_the_public_think_tank.Models.AppUser", "User")
                        .WithMany("UserVotes")
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Comment");

                    b.Navigation("Forum");

                    b.Navigation("Solution");

                    b.Navigation("User");
                });

            modelBuilder.Entity("atlas_the_public_think_tank.Models.AppUser", b =>
                {
                    b.Navigation("Comments");

                    b.Navigation("Forums");

                    b.Navigation("Solutions");

                    b.Navigation("UserHistory");

                    b.Navigation("UserVotes");
                });

            modelBuilder.Entity("atlas_the_public_think_tank.Models.BlockedContent", b =>
                {
                    b.Navigation("Comments");

                    b.Navigation("Forums");

                    b.Navigation("Solutions");
                });

            modelBuilder.Entity("atlas_the_public_think_tank.Models.Category", b =>
                {
                    b.Navigation("ForumCategories");
                });

            modelBuilder.Entity("atlas_the_public_think_tank.Models.Forum", b =>
                {
                    b.Navigation("ChildForums");

                    b.Navigation("Comments");

                    b.Navigation("ForumCategories");

                    b.Navigation("Solutions");

                    b.Navigation("UserVotes");
                });

            modelBuilder.Entity("atlas_the_public_think_tank.Models.Scope", b =>
                {
                    b.Navigation("Forums");
                });

            modelBuilder.Entity("atlas_the_public_think_tank.Models.Solution", b =>
                {
                    b.Navigation("Comments");

                    b.Navigation("UserVotes");
                });

            modelBuilder.Entity("atlas_the_public_think_tank.Models.UserComment", b =>
                {
                    b.Navigation("ChildComments");

                    b.Navigation("UserVotes");
                });
#pragma warning restore 612, 618
        }
    }
}
