// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using atlas_the_public_think_tank.Data;

#nullable disable

namespace atlas_the_public_think_tank.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250901230614_init")]
    partial class init
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("atlas_the_public_think_tank.Data.DatabaseEntities.Content.Comment.Comment", b =>
                {
                    b.Property<Guid>("CommentID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AuthorID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("BlockedContentID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasMaxLength(3000)
                        .HasColumnType("nvarchar(3000)");

                    b.Property<int>("ContentStatus")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("IssueID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("ParentCommentID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("PeriodEnd")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime2")
                        .HasColumnName("PeriodEnd");

                    b.Property<DateTime>("PeriodStart")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime2")
                        .HasColumnName("PeriodStart");

                    b.Property<Guid?>("SolutionID")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("CommentID");

                    b.HasIndex("AuthorID");

                    b.HasIndex("BlockedContentID");

                    b.HasIndex("IssueID");

                    b.HasIndex("ParentCommentID");

                    b.HasIndex("SolutionID");

                    b.ToTable("Comments", "comments");

                    b.ToTable(tb => tb.IsTemporal(ttb =>
                            {
                                ttb.UseHistoryTable("CommentsHistory", "comments");
                                ttb
                                    .HasPeriodStart("PeriodStart")
                                    .HasColumnName("PeriodStart");
                                ttb
                                    .HasPeriodEnd("PeriodEnd")
                                    .HasColumnName("PeriodEnd");
                            }));
                });

            modelBuilder.Entity("atlas_the_public_think_tank.Data.DatabaseEntities.Content.Comment.CommentVote", b =>
                {
                    b.Property<Guid>("VoteID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("AppUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CommentID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("UserID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("VoteValue")
                        .HasColumnType("int");

                    b.HasKey("VoteID");

                    b.HasIndex("AppUserId");

                    b.HasIndex("UserID");

                    b.HasIndex("CommentID", "UserID")
                        .IsUnique();

                    b.ToTable("CommentVotes", "comments");
                });

            modelBuilder.Entity("atlas_the_public_think_tank.Data.DatabaseEntities.Content.Common.Scope", b =>
                {
                    b.Property<Guid>("ScopeID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.PrimitiveCollection<string>("Boundaries")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.PrimitiveCollection<string>("Domains")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.PrimitiveCollection<string>("EntityTypes")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.PrimitiveCollection<string>("Scales")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.PrimitiveCollection<string>("Timeframes")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ScopeID");

                    b.ToTable("Scopes", "app");

                    b.HasData(
                        new
                        {
                            ScopeID = new Guid("b2e2e2c7-7e2a-4e2d-9b1a-2c3e4f5a6b7c"),
                            Boundaries = "[1,2]",
                            Domains = "[1,0,2,4,5]",
                            EntityTypes = "[0,1,2]",
                            Scales = "[3,4,5]",
                            Timeframes = "[1]"
                        },
                        new
                        {
                            ScopeID = new Guid("96bb172c-23fc-4359-b324-e221db3682a9"),
                            Boundaries = "[2,1]",
                            Domains = "[3]",
                            EntityTypes = "[1,2,0]",
                            Scales = "[3]",
                            Timeframes = "[0,1]"
                        });
                });

            modelBuilder.Entity("atlas_the_public_think_tank.Data.DatabaseEntities.Content.Issue.Issue", b =>
                {
                    b.Property<Guid>("IssueID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AuthorID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("BlockedContentID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ContentStatus")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("ParentIssueID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ParentSolutionID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("PeriodEnd")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime2")
                        .HasColumnName("PeriodEnd");

                    b.Property<DateTime>("PeriodStart")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime2")
                        .HasColumnName("PeriodStart");

                    b.Property<Guid?>("ScopeID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("SolutionID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("IssueID");

                    b.HasIndex("AuthorID");

                    b.HasIndex("BlockedContentID");

                    b.HasIndex("ParentIssueID");

                    b.HasIndex("ParentSolutionID");

                    b.HasIndex("ScopeID");

                    b.HasIndex("SolutionID");

                    b.ToTable("Issues", "issues");

                    b.ToTable(tb => tb.IsTemporal(ttb =>
                            {
                                ttb.UseHistoryTable("IssuesHistory", "issues");
                                ttb
                                    .HasPeriodStart("PeriodStart")
                                    .HasColumnName("PeriodStart");
                                ttb
                                    .HasPeriodEnd("PeriodEnd")
                                    .HasColumnName("PeriodEnd");
                            }));

                    b.HasData(
                        new
                        {
                            IssueID = new Guid("e47a95c8-939e-4b5a-a054-f7c127db4eb3"),
                            AuthorID = new Guid("1a61454c-5b83-4aab-8661-96d6dff2ee33"),
                            Content = "Homelessness remains a pervasive and complex crisis affecting individuals, families, and entire communities across urban and rural areas alike. Driven by a combination of factors—including unaffordable housing, poverty, unemployment, mental health challenges, substance use disorders, and systemic inequality—homelessness not only strips individuals of stability and dignity but also places strain on public services and local economies.\n\nMarginalized populations, such as veterans, LGBTQ+ youth, people of color, and those exiting foster care or incarceration, are disproportionately impacted. Despite numerous policy efforts, shelters remain overcrowded, permanent housing solutions underfunded, and preventive measures insufficient.\n\nTackling homelessness requires a coordinated, compassionate approach that addresses both immediate needs and the root causes of housing instability.",
                            ContentStatus = 1,
                            CreatedAt = new DateTime(2024, 1, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ScopeID = new Guid("b2e2e2c7-7e2a-4e2d-9b1a-2c3e4f5a6b7c"),
                            Title = "Homelessness"
                        });
                });

            modelBuilder.Entity("atlas_the_public_think_tank.Data.DatabaseEntities.Content.Issue.IssueTag", b =>
                {
                    b.Property<Guid>("TagID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("IssueID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("TagName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("TagID", "IssueID");

                    b.HasIndex("IssueID");

                    b.ToTable("IssuesTags", "issues");
                });

            modelBuilder.Entity("atlas_the_public_think_tank.Data.DatabaseEntities.Content.Issue.IssueVote", b =>
                {
                    b.Property<Guid>("VoteID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("AppUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("IssueID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("UserID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("VoteValue")
                        .HasColumnType("int");

                    b.HasKey("VoteID");

                    b.HasIndex("AppUserId");

                    b.HasIndex("UserID");

                    b.HasIndex("IssueID", "UserID")
                        .IsUnique();

                    b.ToTable("IssueVotes", "issues");

                    b.HasData(
                        new
                        {
                            VoteID = new Guid("1a2b3c4d-5e6f-7a8b-9c0d-1e2f3a4b5c6d"),
                            CreatedAt = new DateTime(2024, 1, 18, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IssueID = new Guid("e47a95c8-939e-4b5a-a054-f7c127db4eb3"),
                            UserID = new Guid("1a61454c-5b83-4aab-8661-96d6dffbee30"),
                            VoteValue = 10
                        },
                        new
                        {
                            VoteID = new Guid("2b3c4d5e-6f7a-8b9c-0d1e-2f3a4b5c6d7e"),
                            CreatedAt = new DateTime(2024, 1, 19, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IssueID = new Guid("e47a95c8-939e-4b5a-a054-f7c127db4eb3"),
                            UserID = new Guid("1a61454c-5b83-4aab-8661-96d6dff2ee31"),
                            VoteValue = 9
                        },
                        new
                        {
                            VoteID = new Guid("3c4d5e6f-7a8b-9c0d-1e2f-3a4b5c6d7e8f"),
                            CreatedAt = new DateTime(2024, 1, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IssueID = new Guid("e47a95c8-939e-4b5a-a054-f7c127db4eb3"),
                            UserID = new Guid("1a61454c-5b83-4aab-8661-96d6dff2ee32"),
                            VoteValue = 8
                        },
                        new
                        {
                            VoteID = new Guid("4d5e6f7a-8b9c-0d1e-2f3a-4b5c6d7e8f9a"),
                            CreatedAt = new DateTime(2024, 1, 21, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IssueID = new Guid("e47a95c8-939e-4b5a-a054-f7c127db4eb3"),
                            UserID = new Guid("1a61454c-5b83-4aab-8661-96d6dff2ee33"),
                            VoteValue = 7
                        },
                        new
                        {
                            VoteID = new Guid("5e6f7a8b-9c0d-1e2f-3a4b-5c6d7e8f9a0b"),
                            CreatedAt = new DateTime(2024, 1, 22, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IssueID = new Guid("e47a95c8-939e-4b5a-a054-f7c127db4eb3"),
                            UserID = new Guid("1a61454c-5b83-4aab-8661-96d6dff2ee34"),
                            VoteValue = 9
                        },
                        new
                        {
                            VoteID = new Guid("6f7a8b9c-0d1e-2f3a-4b5c-6d7e8f9a0b1c"),
                            CreatedAt = new DateTime(2024, 1, 23, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IssueID = new Guid("e47a95c8-939e-4b5a-a054-f7c127db4eb3"),
                            UserID = new Guid("1a61454c-5b83-4aab-8661-96d6dff2ee35"),
                            VoteValue = 10
                        },
                        new
                        {
                            VoteID = new Guid("7a8b9c0d-1e2f-3a4b-5c6d-7e8f9a0b1c2d"),
                            CreatedAt = new DateTime(2024, 1, 24, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IssueID = new Guid("e47a95c8-939e-4b5a-a054-f7c127db4eb3"),
                            UserID = new Guid("1a61454c-5b83-4aab-8661-96d6dff2ee36"),
                            VoteValue = 8
                        },
                        new
                        {
                            VoteID = new Guid("8b9c0d1e-2f3a-4b5c-6d7e-8f9a0b1c2d3e"),
                            CreatedAt = new DateTime(2024, 1, 25, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IssueID = new Guid("e47a95c8-939e-4b5a-a054-f7c127db4eb3"),
                            UserID = new Guid("1a61454c-5b83-4aab-8661-96d6dff2ee37"),
                            VoteValue = 7
                        },
                        new
                        {
                            VoteID = new Guid("9c0d1e2f-3a4b-5c6d-7e8f-9a0b1c2d3e4f"),
                            CreatedAt = new DateTime(2024, 1, 26, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IssueID = new Guid("e47a95c8-939e-4b5a-a054-f7c127db4eb3"),
                            UserID = new Guid("1a61454c-5b83-4aab-8661-96d6dff2ee38"),
                            VoteValue = 6
                        },
                        new
                        {
                            VoteID = new Guid("0d1e2f3a-4b5c-6d7e-8f9a-0b1c2d3e4f5a"),
                            CreatedAt = new DateTime(2024, 1, 27, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IssueID = new Guid("e47a95c8-939e-4b5a-a054-f7c127db4eb3"),
                            UserID = new Guid("1a61454c-5b83-4aab-8661-96d6dff2ee39"),
                            VoteValue = 9
                        },
                        new
                        {
                            VoteID = new Guid("1e2f3a4b-5c6d-7e8f-9a0b-1c2d3e4f5a6b"),
                            CreatedAt = new DateTime(2024, 1, 28, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IssueID = new Guid("e47a95c8-939e-4b5a-a054-f7c127db4eb3"),
                            UserID = new Guid("1a61454c-5b83-4aab-8661-96d6dff2ee40"),
                            VoteValue = 10
                        },
                        new
                        {
                            VoteID = new Guid("2f3a4b5c-6d7e-8f9a-0b1c-2d3e4f5a6b7c"),
                            CreatedAt = new DateTime(2024, 1, 29, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IssueID = new Guid("e47a95c8-939e-4b5a-a054-f7c127db4eb3"),
                            UserID = new Guid("1a61454c-5b83-4aab-8661-96d6dff2ee41"),
                            VoteValue = 8
                        },
                        new
                        {
                            VoteID = new Guid("3a4b5c6d-7e8f-9a0b-1c2d-3e4f5a6b7c8d"),
                            CreatedAt = new DateTime(2024, 1, 30, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IssueID = new Guid("e47a95c8-939e-4b5a-a054-f7c127db4eb3"),
                            UserID = new Guid("1a61454c-5b83-4aab-8661-96d6dff2ee42"),
                            VoteValue = 7
                        },
                        new
                        {
                            VoteID = new Guid("4b5c6d7e-8f9a-0b1c-2d3e-4f5a6b7c8d9e"),
                            CreatedAt = new DateTime(2024, 1, 31, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IssueID = new Guid("e47a95c8-939e-4b5a-a054-f7c127db4eb3"),
                            UserID = new Guid("1a61454c-5b83-4aab-8661-96d6dff2ee43"),
                            VoteValue = 9
                        },
                        new
                        {
                            VoteID = new Guid("5c6d7e8f-9a0b-1c2d-3e4f-5a6b7c8d9e0f"),
                            CreatedAt = new DateTime(2024, 2, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IssueID = new Guid("e47a95c8-939e-4b5a-a054-f7c127db4eb3"),
                            UserID = new Guid("1a61454c-5b83-4aab-8661-96d6dff2ee44"),
                            VoteValue = 10
                        },
                        new
                        {
                            VoteID = new Guid("6d7e8f9a-0b1c-2d3e-4f5a-6b7c8d9e0f1a"),
                            CreatedAt = new DateTime(2024, 2, 2, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IssueID = new Guid("e47a95c8-939e-4b5a-a054-f7c127db4eb3"),
                            UserID = new Guid("1a61454c-5b83-4aab-8661-96d6dff2ee45"),
                            VoteValue = 8
                        },
                        new
                        {
                            VoteID = new Guid("7e8f9a0b-1c2d-3e4f-5a6b-7c8d9e0f1a2b"),
                            CreatedAt = new DateTime(2024, 2, 3, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IssueID = new Guid("e47a95c8-939e-4b5a-a054-f7c127db4eb3"),
                            UserID = new Guid("1a61454c-5b83-4aab-8661-96d6dff2ee46"),
                            VoteValue = 7
                        },
                        new
                        {
                            VoteID = new Guid("8f9a0b1c-2d3e-4f5a-6b7c-8d9e0f1a2b3c"),
                            CreatedAt = new DateTime(2024, 2, 4, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IssueID = new Guid("e47a95c8-939e-4b5a-a054-f7c127db4eb3"),
                            UserID = new Guid("1a61454c-5b83-4aab-8661-96d6dff2ee47"),
                            VoteValue = 9
                        },
                        new
                        {
                            VoteID = new Guid("9a0b1c2d-3e4f-5a6b-7c8d-9e0f1a2b3c4d"),
                            CreatedAt = new DateTime(2024, 2, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IssueID = new Guid("e47a95c8-939e-4b5a-a054-f7c127db4eb3"),
                            UserID = new Guid("1a61454c-5b83-4aab-8661-96d6dff2ee48"),
                            VoteValue = 8
                        });
                });

            modelBuilder.Entity("atlas_the_public_think_tank.Data.DatabaseEntities.Content.Solution.Solution", b =>
                {
                    b.Property<Guid>("SolutionID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AuthorID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("BlockedContentID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ContentStatus")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("ParentIssueID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("PeriodEnd")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime2")
                        .HasColumnName("PeriodEnd");

                    b.Property<DateTime>("PeriodStart")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime2")
                        .HasColumnName("PeriodStart");

                    b.Property<Guid?>("ScopeID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.HasKey("SolutionID");

                    b.HasIndex("AuthorID");

                    b.HasIndex("BlockedContentID");

                    b.HasIndex("ParentIssueID");

                    b.HasIndex("ScopeID");

                    b.ToTable("Solutions", "solutions");

                    b.ToTable(tb => tb.IsTemporal(ttb =>
                            {
                                ttb.UseHistoryTable("SolutionsHistory", "solutions");
                                ttb
                                    .HasPeriodStart("PeriodStart")
                                    .HasColumnName("PeriodStart");
                                ttb
                                    .HasPeriodEnd("PeriodEnd")
                                    .HasColumnName("PeriodEnd");
                            }));

                    b.HasData(
                        new
                        {
                            SolutionID = new Guid("e9d8c7b6-5a42-49f3-b187-2c60d5a3e9f1"),
                            AuthorID = new Guid("1a61454c-5b83-4aab-8661-96d6dff2ee32"),
                            Content = "Mobile Outreach Teams with Clinicians and Social Workers represent a proactive, relationship-based approach to engaging people experiencing homelessness who may be disconnected from traditional service systems. By bringing multidisciplinary expertise directly to individuals where they live—whether in encampments, vehicles, abandoned buildings, or other unsheltered locations—these teams establish trust, provide immediate assistance, and create pathways to housing, healthcare, and long-term support.\n\nEffective mobile outreach teams typically include several key professionals working in coordination: Licensed clinicians (psychiatrists, psychiatric nurse practitioners, or clinical social workers) who can conduct field-based mental health and substance use assessments, provide brief interventions, prescribe medications when appropriate, and facilitate connections to ongoing treatment; Social workers or case managers who assist with benefits applications, housing navigation, and coordination of various services; Peer support specialists with lived experience of homelessness who offer authentic connection, practical guidance, and hope through their own recovery journeys; and occasionally, specially trained law enforcement officers or emergency medical technicians who can address safety concerns or medical emergencies with a humanitarian, rather than punitive, approach.\n\nThe operational model emphasizes consistency, persistence, and respect for individual autonomy. Teams visit the same locations on predictable schedules, allowing for relationship development over time. They practice trauma-informed engagement, recognizing that many homeless individuals have experienced past traumatic events, including negative interactions with service systems. Rather than requiring immediate compliance with program expectations, teams work at the individual's pace, beginning with low-barrier assistance that addresses immediate needs—food, hygiene supplies, wound care, harm reduction supplies—while gradually building trust for more intensive interventions.\n\nMobile outreach teams are equipped with technology and resources that enable field-based service delivery: Tablets or laptops with cellular connectivity for real-time documentation, benefits applications, and housing registries; Transportation capacity to accompany clients to appointments; Basic medical supplies for first aid and health assessments; Emergency funds for immediate needs like temporary accommodations or identification documents; and Direct access to shelter beds or transitional housing units reserved specifically for outreach referrals, allowing teams to offer immediate alternatives to unsheltered homelessness.\n\nWhen implemented effectively, mobile outreach yields significant benefits: Improved engagement of highly vulnerable individuals who would otherwise remain disconnected from services; Reduced reliance on costly emergency systems like hospitals and jails; Earlier intervention in health and mental health conditions before they reach crisis levels; More successful housing placements due to the trust established through consistent outreach; and Improved community relations by addressing visible homelessness with compassion rather than criminalization.\n\nSuccessful implementation requires dedicated funding for competitive salaries, appropriate staffing ratios, quality supervision, and comprehensive training. Programs must balance geographic coverage with sufficient time for meaningful engagement, avoid becoming merely a crisis response system, and maintain strong connections to housing resources to ensure outreach leads to permanent solutions rather than merely managing homelessness.",
                            ContentStatus = 1,
                            CreatedAt = new DateTime(2024, 10, 25, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ParentIssueID = new Guid("e47a95c8-939e-4b5a-a054-f7c127db4eb3"),
                            ScopeID = new Guid("96bb172c-23fc-4359-b324-e221db3682a9"),
                            Title = "Mobile Outreach Teams with Clinicians and Social Workers"
                        });
                });

            modelBuilder.Entity("atlas_the_public_think_tank.Data.DatabaseEntities.Content.Solution.SolutionTag", b =>
                {
                    b.Property<Guid>("TagID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("SolutionID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("TagName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("TagID", "SolutionID");

                    b.HasIndex("SolutionID");

                    b.ToTable("SolutionsTags", "solutions");
                });

            modelBuilder.Entity("atlas_the_public_think_tank.Data.DatabaseEntities.Content.Solution.SolutionVote", b =>
                {
                    b.Property<Guid>("VoteID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("AppUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("SolutionID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UserID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("VoteValue")
                        .HasColumnType("int");

                    b.HasKey("VoteID");

                    b.HasIndex("AppUserId");

                    b.HasIndex("UserID");

                    b.HasIndex("SolutionID", "UserID")
                        .IsUnique();

                    b.ToTable("SolutionVotes", "solutions");

                    b.HasData(
                        new
                        {
                            VoteID = new Guid("f0e9d8c7-6b53-40a4-b298-3d71e6f4a0b9"),
                            CreatedAt = new DateTime(2024, 10, 26, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            SolutionID = new Guid("e9d8c7b6-5a42-49f3-b187-2c60d5a3e9f1"),
                            UserID = new Guid("1a61454c-5b83-4aab-8661-96d6dffbee30"),
                            VoteValue = 10
                        },
                        new
                        {
                            VoteID = new Guid("a1f0e9d8-7c64-41b5-b309-4e82f7a5b1c0"),
                            CreatedAt = new DateTime(2024, 10, 27, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            SolutionID = new Guid("e9d8c7b6-5a42-49f3-b187-2c60d5a3e9f1"),
                            UserID = new Guid("1a61454c-5b83-4aab-8661-96d6dff2ee31"),
                            VoteValue = 9
                        },
                        new
                        {
                            VoteID = new Guid("b2a1f0e9-8d75-42c6-b410-5f93a8b6c2d1"),
                            CreatedAt = new DateTime(2024, 10, 28, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            SolutionID = new Guid("e9d8c7b6-5a42-49f3-b187-2c60d5a3e9f1"),
                            UserID = new Guid("1a61454c-5b83-4aab-8661-96d6dff2ee32"),
                            VoteValue = 10
                        },
                        new
                        {
                            VoteID = new Guid("c3b2a1f0-9e86-43d7-b521-6a04b9c7d3e2"),
                            CreatedAt = new DateTime(2024, 10, 29, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            SolutionID = new Guid("e9d8c7b6-5a42-49f3-b187-2c60d5a3e9f1"),
                            UserID = new Guid("1a61454c-5b83-4aab-8661-96d6dff2ee33"),
                            VoteValue = 9
                        },
                        new
                        {
                            VoteID = new Guid("d4c3b2a1-0f97-44e8-a632-7b15c0d8e4f3"),
                            CreatedAt = new DateTime(2024, 10, 30, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            SolutionID = new Guid("e9d8c7b6-5a42-49f3-b187-2c60d5a3e9f1"),
                            UserID = new Guid("1a61454c-5b83-4aab-8661-96d6dff2ee34"),
                            VoteValue = 8
                        },
                        new
                        {
                            VoteID = new Guid("e5d4c3b2-1a08-45f9-b743-8c26d1e9f5a4"),
                            CreatedAt = new DateTime(2024, 10, 31, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            SolutionID = new Guid("e9d8c7b6-5a42-49f3-b187-2c60d5a3e9f1"),
                            UserID = new Guid("1a61454c-5b83-4aab-8661-96d6dff2ee35"),
                            VoteValue = 9
                        },
                        new
                        {
                            VoteID = new Guid("f6e5d4c3-2b19-46a0-b854-9d37e2f0a6b5"),
                            CreatedAt = new DateTime(2024, 11, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            SolutionID = new Guid("e9d8c7b6-5a42-49f3-b187-2c60d5a3e9f1"),
                            UserID = new Guid("1a61454c-5b83-4aab-8661-96d6dff2ee36"),
                            VoteValue = 10
                        },
                        new
                        {
                            VoteID = new Guid("a7f6e5d4-3c20-47b1-b965-0e48f3a1b7c6"),
                            CreatedAt = new DateTime(2024, 11, 2, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            SolutionID = new Guid("e9d8c7b6-5a42-49f3-b187-2c60d5a3e9f1"),
                            UserID = new Guid("1a61454c-5b83-4aab-8661-96d6dff2ee37"),
                            VoteValue = 9
                        },
                        new
                        {
                            VoteID = new Guid("b8a7f6e5-4d31-48c2-b076-1f59a4b2c8d7"),
                            CreatedAt = new DateTime(2024, 11, 3, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            SolutionID = new Guid("e9d8c7b6-5a42-49f3-b187-2c60d5a3e9f1"),
                            UserID = new Guid("1a61454c-5b83-4aab-8661-96d6dff2ee38"),
                            VoteValue = 8
                        },
                        new
                        {
                            VoteID = new Guid("c9b8a7f6-5e42-49d3-b187-2a60b5c3d9e8"),
                            CreatedAt = new DateTime(2024, 11, 4, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            SolutionID = new Guid("e9d8c7b6-5a42-49f3-b187-2c60d5a3e9f1"),
                            UserID = new Guid("1a61454c-5b83-4aab-8661-96d6dff2ee39"),
                            VoteValue = 9
                        },
                        new
                        {
                            VoteID = new Guid("d0c9b8a7-6f53-40e4-b298-3b71c6d4e0f9"),
                            CreatedAt = new DateTime(2024, 11, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            SolutionID = new Guid("e9d8c7b6-5a42-49f3-b187-2c60d5a3e9f1"),
                            UserID = new Guid("1a61454c-5b83-4aab-8661-96d6dff2ee40"),
                            VoteValue = 10
                        },
                        new
                        {
                            VoteID = new Guid("e1d0c9b8-7a64-41f5-b309-4c82d7e5f1a0"),
                            CreatedAt = new DateTime(2024, 11, 6, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            SolutionID = new Guid("e9d8c7b6-5a42-49f3-b187-2c60d5a3e9f1"),
                            UserID = new Guid("1a61454c-5b83-4aab-8661-96d6dff2ee41"),
                            VoteValue = 9
                        },
                        new
                        {
                            VoteID = new Guid("f2e1d0c9-8b75-42a6-b410-5d93e8f6a2b1"),
                            CreatedAt = new DateTime(2024, 11, 7, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            SolutionID = new Guid("e9d8c7b6-5a42-49f3-b187-2c60d5a3e9f1"),
                            UserID = new Guid("1a61454c-5b83-4aab-8661-96d6dff2ee42"),
                            VoteValue = 8
                        },
                        new
                        {
                            VoteID = new Guid("a3f2e1d0-9c86-43b7-b521-6e04f9a7b3c2"),
                            CreatedAt = new DateTime(2024, 11, 8, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            SolutionID = new Guid("e9d8c7b6-5a42-49f3-b187-2c60d5a3e9f1"),
                            UserID = new Guid("1a61454c-5b83-4aab-8661-96d6dff2ee43"),
                            VoteValue = 9
                        },
                        new
                        {
                            VoteID = new Guid("b4a3f2e1-0d97-44c8-b632-7f15a0b8c4d3"),
                            CreatedAt = new DateTime(2024, 11, 9, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            SolutionID = new Guid("e9d8c7b6-5a42-49f3-b187-2c60d5a3e9f1"),
                            UserID = new Guid("1a61454c-5b83-4aab-8661-96d6dff2ee44"),
                            VoteValue = 10
                        });
                });

            modelBuilder.Entity("atlas_the_public_think_tank.Data.DatabaseEntities.History.UserHistory", b =>
                {
                    b.Property<Guid>("UserHistoryID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Action")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<Guid?>("CommentID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("IssueID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Link")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<Guid?>("SolutionID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("Timestamp")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<Guid>("UserID")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("UserHistoryID");

                    b.HasIndex("CommentID");

                    b.HasIndex("IssueID");

                    b.HasIndex("SolutionID");

                    b.HasIndex("UserID");

                    b.ToTable("UserHistory", "users");
                });

            modelBuilder.Entity("atlas_the_public_think_tank.Data.DatabaseEntities.Moderation.BlockedContent", b =>
                {
                    b.Property<Guid>("BlockedContentID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<short?>("ReasonID")
                        .HasColumnType("smallint");

                    b.HasKey("BlockedContentID");

                    b.ToTable("BlockedContent", "app");
                });

            modelBuilder.Entity("atlas_the_public_think_tank.Data.DatabaseEntities.Users.AppUser", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("1a61454c-5b83-4aab-8661-96d6dffbee30"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "a1b2c3d4-e5f6-7890-abcd-ef1234567890",
                            Email = "seed.user1@example.com",
                            EmailConfirmed = true,
                            LockoutEnabled = true,
                            NormalizedEmail = "SEED.USER1@EXAMPLE.COM",
                            NormalizedUserName = "SEED.USER.ONE",
                            PasswordHash = "AQAAAAEAACcQAAAAEExamplePasswordHash==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "d12ef04d-5b83-4aab-8661-567ffb12e15",
                            TwoFactorEnabled = false,
                            UserName = "Seed.User.One"
                        },
                        new
                        {
                            Id = new Guid("1a61454c-5b83-4aab-8661-96d6dff2ee31"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "a1b2c3d4-e5f6-7890-abcd-ef1234567890",
                            Email = "seed.user2@example.com",
                            EmailConfirmed = true,
                            LockoutEnabled = true,
                            NormalizedEmail = "SEED.USER2@EXAMPLE.COM",
                            NormalizedUserName = "SEED.USER.TWO",
                            PasswordHash = "AQAAAAEAACcQAAAAEExamplePasswordHash==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "d12ef04d-5b83-4aab-8661-567ffb12e15",
                            TwoFactorEnabled = false,
                            UserName = "Seed.User.Two"
                        },
                        new
                        {
                            Id = new Guid("1a61454c-5b83-4aab-8661-96d6dff2ee32"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "a1b2c3d4-e5f6-7890-abcd-ef1234567890",
                            Email = "seed.user3@example.com",
                            EmailConfirmed = true,
                            LockoutEnabled = true,
                            NormalizedEmail = "SEED.USER3@EXAMPLE.COM",
                            NormalizedUserName = "SEED.USER.THREE",
                            PasswordHash = "AQAAAAEAACcQAAAAEExamplePasswordHash==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "d12ef04d-5b83-4aab-8661-567ffb12e15",
                            TwoFactorEnabled = false,
                            UserName = "Seed.User.Three"
                        },
                        new
                        {
                            Id = new Guid("1a61454c-5b83-4aab-8661-96d6dff2ee33"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "a1b2c3d4-e5f6-7890-abcd-ef1234567890",
                            Email = "seed.user4@example.com",
                            EmailConfirmed = true,
                            LockoutEnabled = true,
                            NormalizedEmail = "SEED.USER4@EXAMPLE.COM",
                            NormalizedUserName = "SEED.USER.FOUR",
                            PasswordHash = "AQAAAAEAACcQAAAAEExamplePasswordHash==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "d12ef04d-5b83-4aab-8661-567ffb12e15",
                            TwoFactorEnabled = false,
                            UserName = "Seed.User.Four"
                        },
                        new
                        {
                            Id = new Guid("1a61454c-5b83-4aab-8661-96d6dff2ee34"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "a1b2c3d4-e5f6-7890-abcd-ef1234567890",
                            Email = "seed.user5@example.com",
                            EmailConfirmed = true,
                            LockoutEnabled = true,
                            NormalizedEmail = "SEED.USER5@EXAMPLE.COM",
                            NormalizedUserName = "SEED.USER.FIVE",
                            PasswordHash = "AQAAAAEAACcQAAAAEExamplePasswordHash==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "d12ef04d-5b83-4aab-8661-567ffb12e15",
                            TwoFactorEnabled = false,
                            UserName = "Seed.User.Five"
                        },
                        new
                        {
                            Id = new Guid("1a61454c-5b83-4aab-8661-96d6dff2ee35"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "a1b2c3d4-e5f6-7890-abcd-ef1234567890",
                            Email = "seed.user6@example.com",
                            EmailConfirmed = true,
                            LockoutEnabled = true,
                            NormalizedEmail = "SEED.USER6@EXAMPLE.COM",
                            NormalizedUserName = "SEED.USER.SIX",
                            PasswordHash = "AQAAAAEAACcQAAAAEExamplePasswordHash==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "d12ef04d-5b83-4aab-8661-567ffb12e15",
                            TwoFactorEnabled = false,
                            UserName = "Seed.User.Six"
                        },
                        new
                        {
                            Id = new Guid("1a61454c-5b83-4aab-8661-96d6dff2ee36"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "a1b2c3d4-e5f6-7890-abcd-ef1234567890",
                            Email = "seed.user7@example.com",
                            EmailConfirmed = true,
                            LockoutEnabled = true,
                            NormalizedEmail = "SEED.USER7@EXAMPLE.COM",
                            NormalizedUserName = "SEED.USER.SEVEN",
                            PasswordHash = "AQAAAAEAACcQAAAAEExamplePasswordHash==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "d12ef04d-5b83-4aab-8661-567ffb12e15",
                            TwoFactorEnabled = false,
                            UserName = "Seed.User.Seven"
                        },
                        new
                        {
                            Id = new Guid("1a61454c-5b83-4aab-8661-96d6dff2ee37"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "a1b2c3d4-e5f6-7890-abcd-ef1234567890",
                            Email = "seed.user8@example.com",
                            EmailConfirmed = true,
                            LockoutEnabled = true,
                            NormalizedEmail = "SEED.USER8@EXAMPLE.COM",
                            NormalizedUserName = "SEED.USER.EIGHT",
                            PasswordHash = "AQAAAAEAACcQAAAAEExamplePasswordHash==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "d12ef04d-5b83-4aab-8661-567ffb12e15",
                            TwoFactorEnabled = false,
                            UserName = "Seed.User.Eight"
                        },
                        new
                        {
                            Id = new Guid("1a61454c-5b83-4aab-8661-96d6dff2ee38"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "a1b2c3d4-e5f6-7890-abcd-ef1234567890",
                            Email = "seed.user9@example.com",
                            EmailConfirmed = true,
                            LockoutEnabled = true,
                            NormalizedEmail = "SEED.USER9@EXAMPLE.COM",
                            NormalizedUserName = "SEED.USER.NINE",
                            PasswordHash = "AQAAAAEAACcQAAAAEExamplePasswordHash==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "d12ef04d-5b83-4aab-8661-567ffb12e15",
                            TwoFactorEnabled = false,
                            UserName = "Seed.User.Nine"
                        },
                        new
                        {
                            Id = new Guid("1a61454c-5b83-4aab-8661-96d6dff2ee39"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "a1b2c3d4-e5f6-7890-abcd-ef1234567890",
                            Email = "seed.user10@example.com",
                            EmailConfirmed = true,
                            LockoutEnabled = true,
                            NormalizedEmail = "SEED.USER10@EXAMPLE.COM",
                            NormalizedUserName = "SEED.USER.TEN",
                            PasswordHash = "AQAAAAEAACcQAAAAEExamplePasswordHash==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "d12ef04d-5b83-4aab-8661-567ffb12e15",
                            TwoFactorEnabled = false,
                            UserName = "Seed.User.Ten"
                        },
                        new
                        {
                            Id = new Guid("1a61454c-5b83-4aab-8661-96d6dff2ee40"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "a1b2c3d4-e5f6-7890-abcd-ef1234567890",
                            Email = "seed.user11@example.com",
                            EmailConfirmed = true,
                            LockoutEnabled = true,
                            NormalizedEmail = "SEED.USER11@EXAMPLE.COM",
                            NormalizedUserName = "SEED.USER.ELEVEN",
                            PasswordHash = "AQAAAAEAACcQAAAAEExamplePasswordHash==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "d12ef04d-5b83-4aab-8661-567ffb12e15",
                            TwoFactorEnabled = false,
                            UserName = "Seed.User.Eleven"
                        },
                        new
                        {
                            Id = new Guid("1a61454c-5b83-4aab-8661-96d6dff2ee41"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "a1b2c3d4-e5f6-7890-abcd-ef1234567890",
                            Email = "seed.user12@example.com",
                            EmailConfirmed = true,
                            LockoutEnabled = true,
                            NormalizedEmail = "SEED.USER12@EXAMPLE.COM",
                            NormalizedUserName = "SEED.USER.TWELVE",
                            PasswordHash = "AQAAAAEAACcQAAAAEExamplePasswordHash==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "d12ef04d-5b83-4aab-8661-567ffb12e15",
                            TwoFactorEnabled = false,
                            UserName = "Seed.User.Twelve"
                        },
                        new
                        {
                            Id = new Guid("1a61454c-5b83-4aab-8661-96d6dff2ee42"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "a1b2c3d4-e5f6-7890-abcd-ef1234567890",
                            Email = "seed.user13@example.com",
                            EmailConfirmed = true,
                            LockoutEnabled = true,
                            NormalizedEmail = "SEED.USER13@EXAMPLE.COM",
                            NormalizedUserName = "SEED.USER.THIRTEEN",
                            PasswordHash = "AQAAAAEAACcQAAAAEExamplePasswordHash==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "d12ef04d-5b83-4aab-8661-567ffb12e15",
                            TwoFactorEnabled = false,
                            UserName = "Seed.User.Thirteen"
                        },
                        new
                        {
                            Id = new Guid("1a61454c-5b83-4aab-8661-96d6dff2ee43"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "a1b2c3d4-e5f6-7890-abcd-ef1234567890",
                            Email = "seed.user14@example.com",
                            EmailConfirmed = true,
                            LockoutEnabled = true,
                            NormalizedEmail = "SEED.USER14@EXAMPLE.COM",
                            NormalizedUserName = "SEED.USER.FOURTEEN",
                            PasswordHash = "AQAAAAEAACcQAAAAEExamplePasswordHash==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "d12ef04d-5b83-4aab-8661-567ffb12e15",
                            TwoFactorEnabled = false,
                            UserName = "Seed.User.Fourteen"
                        },
                        new
                        {
                            Id = new Guid("1a61454c-5b83-4aab-8661-96d6dff2ee44"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "a1b2c3d4-e5f6-7890-abcd-ef1234567890",
                            Email = "seed.user15@example.com",
                            EmailConfirmed = true,
                            LockoutEnabled = true,
                            NormalizedEmail = "SEED.USER15@EXAMPLE.COM",
                            NormalizedUserName = "SEED.USER.FIFTEEN",
                            PasswordHash = "AQAAAAEAACcQAAAAEExamplePasswordHash==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "d12ef04d-5b83-4aab-8661-567ffb12e15",
                            TwoFactorEnabled = false,
                            UserName = "Seed.User.Fifteen"
                        },
                        new
                        {
                            Id = new Guid("1a61454c-5b83-4aab-8661-96d6dff2ee45"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "a1b2c3d4-e5f6-7890-abcd-ef1234567890",
                            Email = "seed.user16@example.com",
                            EmailConfirmed = true,
                            LockoutEnabled = true,
                            NormalizedEmail = "SEED.USER16@EXAMPLE.COM",
                            NormalizedUserName = "SEED.USER.SIXTEEN",
                            PasswordHash = "AQAAAAEAACcQAAAAEExamplePasswordHash==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "d12ef04d-5b83-4aab-8661-567ffb12e15",
                            TwoFactorEnabled = false,
                            UserName = "Seed.User.Sixteen"
                        },
                        new
                        {
                            Id = new Guid("1a61454c-5b83-4aab-8661-96d6dff2ee46"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "a1b2c3d4-e5f6-7890-abcd-ef1234567890",
                            Email = "seed.user17@example.com",
                            EmailConfirmed = true,
                            LockoutEnabled = true,
                            NormalizedEmail = "SEED.USER17@EXAMPLE.COM",
                            NormalizedUserName = "SEED.USER.SEVENTEEN",
                            PasswordHash = "AQAAAAEAACcQAAAAEExamplePasswordHash==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "d12ef04d-5b83-4aab-8661-567ffb12e15",
                            TwoFactorEnabled = false,
                            UserName = "Seed.User.Seventeen"
                        },
                        new
                        {
                            Id = new Guid("1a61454c-5b83-4aab-8661-96d6dff2ee47"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "a1b2c3d4-e5f6-7890-abcd-ef1234567890",
                            Email = "seed.user18@example.com",
                            EmailConfirmed = true,
                            LockoutEnabled = true,
                            NormalizedEmail = "SEED.USER18@EXAMPLE.COM",
                            NormalizedUserName = "SEED.USER.EIGHTEEN",
                            PasswordHash = "AQAAAAEAACcQAAAAEExamplePasswordHash==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "d12ef04d-5b83-4aab-8661-567ffb12e15",
                            TwoFactorEnabled = false,
                            UserName = "Seed.User.Eighteen"
                        },
                        new
                        {
                            Id = new Guid("1a61454c-5b83-4aab-8661-96d6dff2ee48"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "a1b2c3d4-e5f6-7890-abcd-ef1234567890",
                            Email = "seed.user19@example.com",
                            EmailConfirmed = true,
                            LockoutEnabled = true,
                            NormalizedEmail = "SEED.USER19@EXAMPLE.COM",
                            NormalizedUserName = "SEED.USER.NINETEEN",
                            PasswordHash = "AQAAAAEAACcQAAAAEExamplePasswordHash==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "d12ef04d-5b83-4aab-8661-567ffb12e15",
                            TwoFactorEnabled = false,
                            UserName = "Seed.User.Nineteen"
                        },
                        new
                        {
                            Id = new Guid("1a61454c-5b83-4aab-8661-96d6dff2ee49"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "a1b2c3d4-e5f6-7890-abcd-ef1234567890",
                            Email = "seed.user20@example.com",
                            EmailConfirmed = true,
                            LockoutEnabled = true,
                            NormalizedEmail = "SEED.USER20@EXAMPLE.COM",
                            NormalizedUserName = "SEED.USER.TWENTY",
                            PasswordHash = "AQAAAAEAACcQAAAAEExamplePasswordHash==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "d12ef04d-5b83-4aab-8661-567ffb12e15",
                            TwoFactorEnabled = false,
                            UserName = "Seed.User.Twenty"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.HasOne("atlas_the_public_think_tank.Data.DatabaseEntities.Users.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.HasOne("atlas_the_public_think_tank.Data.DatabaseEntities.Users.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("atlas_the_public_think_tank.Data.DatabaseEntities.Users.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.HasOne("atlas_the_public_think_tank.Data.DatabaseEntities.Users.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("atlas_the_public_think_tank.Data.DatabaseEntities.Content.Comment.Comment", b =>
                {
                    b.HasOne("atlas_the_public_think_tank.Data.DatabaseEntities.Users.AppUser", "Author")
                        .WithMany("Comments")
                        .HasForeignKey("AuthorID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("atlas_the_public_think_tank.Data.DatabaseEntities.Moderation.BlockedContent", "BlockedContent")
                        .WithMany("Comments")
                        .HasForeignKey("BlockedContentID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("atlas_the_public_think_tank.Data.DatabaseEntities.Content.Issue.Issue", "Issue")
                        .WithMany("Comments")
                        .HasForeignKey("IssueID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("atlas_the_public_think_tank.Data.DatabaseEntities.Content.Comment.Comment", "ParentComment")
                        .WithMany("ChildComments")
                        .HasForeignKey("ParentCommentID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("atlas_the_public_think_tank.Data.DatabaseEntities.Content.Solution.Solution", "Solution")
                        .WithMany("Comments")
                        .HasForeignKey("SolutionID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Author");

                    b.Navigation("BlockedContent");

                    b.Navigation("Issue");

                    b.Navigation("ParentComment");

                    b.Navigation("Solution");
                });

            modelBuilder.Entity("atlas_the_public_think_tank.Data.DatabaseEntities.Content.Comment.CommentVote", b =>
                {
                    b.HasOne("atlas_the_public_think_tank.Data.DatabaseEntities.Users.AppUser", null)
                        .WithMany("CommentVotes")
                        .HasForeignKey("AppUserId");

                    b.HasOne("atlas_the_public_think_tank.Data.DatabaseEntities.Content.Comment.Comment", "Comment")
                        .WithMany("CommentVotes")
                        .HasForeignKey("CommentID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("atlas_the_public_think_tank.Data.DatabaseEntities.Users.AppUser", "User")
                        .WithMany()
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Comment");

                    b.Navigation("User");
                });

            modelBuilder.Entity("atlas_the_public_think_tank.Data.DatabaseEntities.Content.Issue.Issue", b =>
                {
                    b.HasOne("atlas_the_public_think_tank.Data.DatabaseEntities.Users.AppUser", "Author")
                        .WithMany("Issues")
                        .HasForeignKey("AuthorID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("atlas_the_public_think_tank.Data.DatabaseEntities.Moderation.BlockedContent", "BlockedContent")
                        .WithMany("Issues")
                        .HasForeignKey("BlockedContentID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("atlas_the_public_think_tank.Data.DatabaseEntities.Content.Issue.Issue", "ParentIssue")
                        .WithMany("ChildIssues")
                        .HasForeignKey("ParentIssueID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("atlas_the_public_think_tank.Data.DatabaseEntities.Content.Solution.Solution", "ParentSolution")
                        .WithMany()
                        .HasForeignKey("ParentSolutionID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("atlas_the_public_think_tank.Data.DatabaseEntities.Content.Common.Scope", "Scope")
                        .WithMany()
                        .HasForeignKey("ScopeID");

                    b.HasOne("atlas_the_public_think_tank.Data.DatabaseEntities.Content.Solution.Solution", null)
                        .WithMany("ChildIssues")
                        .HasForeignKey("SolutionID");

                    b.Navigation("Author");

                    b.Navigation("BlockedContent");

                    b.Navigation("ParentIssue");

                    b.Navigation("ParentSolution");

                    b.Navigation("Scope");
                });

            modelBuilder.Entity("atlas_the_public_think_tank.Data.DatabaseEntities.Content.Issue.IssueTag", b =>
                {
                    b.HasOne("atlas_the_public_think_tank.Data.DatabaseEntities.Content.Issue.Issue", null)
                        .WithMany("IssueTags")
                        .HasForeignKey("IssueID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("atlas_the_public_think_tank.Data.DatabaseEntities.Content.Issue.IssueVote", b =>
                {
                    b.HasOne("atlas_the_public_think_tank.Data.DatabaseEntities.Users.AppUser", null)
                        .WithMany("IssueVotes")
                        .HasForeignKey("AppUserId");

                    b.HasOne("atlas_the_public_think_tank.Data.DatabaseEntities.Content.Issue.Issue", "Issue")
                        .WithMany("IssueVotes")
                        .HasForeignKey("IssueID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("atlas_the_public_think_tank.Data.DatabaseEntities.Users.AppUser", "User")
                        .WithMany()
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Issue");

                    b.Navigation("User");
                });

            modelBuilder.Entity("atlas_the_public_think_tank.Data.DatabaseEntities.Content.Solution.Solution", b =>
                {
                    b.HasOne("atlas_the_public_think_tank.Data.DatabaseEntities.Users.AppUser", "Author")
                        .WithMany("Solutions")
                        .HasForeignKey("AuthorID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("atlas_the_public_think_tank.Data.DatabaseEntities.Moderation.BlockedContent", "BlockedContent")
                        .WithMany("Solutions")
                        .HasForeignKey("BlockedContentID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("atlas_the_public_think_tank.Data.DatabaseEntities.Content.Issue.Issue", "ParentIssue")
                        .WithMany("Solutions")
                        .HasForeignKey("ParentIssueID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("atlas_the_public_think_tank.Data.DatabaseEntities.Content.Common.Scope", "Scope")
                        .WithMany()
                        .HasForeignKey("ScopeID");

                    b.Navigation("Author");

                    b.Navigation("BlockedContent");

                    b.Navigation("ParentIssue");

                    b.Navigation("Scope");
                });

            modelBuilder.Entity("atlas_the_public_think_tank.Data.DatabaseEntities.Content.Solution.SolutionTag", b =>
                {
                    b.HasOne("atlas_the_public_think_tank.Data.DatabaseEntities.Content.Solution.Solution", null)
                        .WithMany("SolutionTags")
                        .HasForeignKey("SolutionID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("atlas_the_public_think_tank.Data.DatabaseEntities.Content.Solution.SolutionVote", b =>
                {
                    b.HasOne("atlas_the_public_think_tank.Data.DatabaseEntities.Users.AppUser", null)
                        .WithMany("SolutionVotes")
                        .HasForeignKey("AppUserId");

                    b.HasOne("atlas_the_public_think_tank.Data.DatabaseEntities.Content.Solution.Solution", "Solution")
                        .WithMany("SolutionVotes")
                        .HasForeignKey("SolutionID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("atlas_the_public_think_tank.Data.DatabaseEntities.Users.AppUser", "User")
                        .WithMany()
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Solution");

                    b.Navigation("User");
                });

            modelBuilder.Entity("atlas_the_public_think_tank.Data.DatabaseEntities.History.UserHistory", b =>
                {
                    b.HasOne("atlas_the_public_think_tank.Data.DatabaseEntities.Content.Comment.Comment", "Comment")
                        .WithMany()
                        .HasForeignKey("CommentID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("atlas_the_public_think_tank.Data.DatabaseEntities.Content.Issue.Issue", "Issue")
                        .WithMany()
                        .HasForeignKey("IssueID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("atlas_the_public_think_tank.Data.DatabaseEntities.Content.Solution.Solution", "Solution")
                        .WithMany()
                        .HasForeignKey("SolutionID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("atlas_the_public_think_tank.Data.DatabaseEntities.Users.AppUser", "User")
                        .WithMany("UserHistory")
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Comment");

                    b.Navigation("Issue");

                    b.Navigation("Solution");

                    b.Navigation("User");
                });

            modelBuilder.Entity("atlas_the_public_think_tank.Data.DatabaseEntities.Content.Comment.Comment", b =>
                {
                    b.Navigation("ChildComments");

                    b.Navigation("CommentVotes");
                });

            modelBuilder.Entity("atlas_the_public_think_tank.Data.DatabaseEntities.Content.Issue.Issue", b =>
                {
                    b.Navigation("ChildIssues");

                    b.Navigation("Comments");

                    b.Navigation("IssueTags");

                    b.Navigation("IssueVotes");

                    b.Navigation("Solutions");
                });

            modelBuilder.Entity("atlas_the_public_think_tank.Data.DatabaseEntities.Content.Solution.Solution", b =>
                {
                    b.Navigation("ChildIssues");

                    b.Navigation("Comments");

                    b.Navigation("SolutionTags");

                    b.Navigation("SolutionVotes");
                });

            modelBuilder.Entity("atlas_the_public_think_tank.Data.DatabaseEntities.Moderation.BlockedContent", b =>
                {
                    b.Navigation("Comments");

                    b.Navigation("Issues");

                    b.Navigation("Solutions");
                });

            modelBuilder.Entity("atlas_the_public_think_tank.Data.DatabaseEntities.Users.AppUser", b =>
                {
                    b.Navigation("CommentVotes");

                    b.Navigation("Comments");

                    b.Navigation("IssueVotes");

                    b.Navigation("Issues");

                    b.Navigation("SolutionVotes");

                    b.Navigation("Solutions");

                    b.Navigation("UserHistory");
                });
#pragma warning restore 612, 618
        }
    }
}
