@using atlas_the_public_think_tank.Models.ViewModel

@*
    This is the home page of the app.
    Specifically the main section of that page.
    The layout file contains the sidebar and header.
*@


@model HomeIndexViewModel
@{
    ViewData["Title"] = "Home Page";

    int NextPageNumber = Model.PaginatedContent.CurrentPage + 1;
    Boolean isMorePosts = Model.PaginatedContent.PageSize < Model.PaginatedContent.TotalCount;
}



<div class="container-fluid">
    <div class="row">
        <!-- Main content with issues -->
        <div class="col-lg-9 px-0">
            <div class="my-3">
                <a href="@Url.Action("CreateIssue", "Issue")" class="btn btn-primary fw-bold outlined-text fs-5 mb-1 mb-md-0" styfs-5" style="color:var(--call-to-action-theme-color)">Create New Issue</a>
                <a href="@Url.Action("CreateSolution", "Solution")" class="btn btn-primary fw-bold outlined-text fs-5 mb-1 mb-md-0" styfs-5" style="color:var(--call-to-action-theme-color)">Create New Solution</a>
            </div>

            <div class="d-flex justify-content-center mb-3">
                @await Html.PartialAsync(
                "~/Views/Shared/Components/_gradient-border.cshtml",
                                new GradientBorderModel()
                                {
                                    Link = "https://www.youtube.com/watch?v=ULjr4gNmb9s",
                                    LinkText = "Click here to view inspiration for this website"
                                })
            </div>
            <div id="main-content">


                @if (Model.PaginatedContent != null && Model.PaginatedContent.ContentItems != null && Model.PaginatedContent.ContentItems.Any())
                {

                    @foreach (var item in Model.PaginatedContent.ContentItems)
                    {

                        @if (item.ContentType == atlas_the_public_think_tank.Models.Database.ContentType.Issue)
                        {
                            @await Html.PartialAsync("~/Views/Issue/_issue-card.cshtml", new Issue_ReadVM
                            {
                                IssueID = item.ContentID,
                                Title = item.Title,
                                Content = item.Content,
                                CreatedAt = item.CreatedAt,
                                ModifiedAt = item.ModifiedAt,
                                LastActivity = item.LastActivity,
                                ContentStatus = item.ContentStatus,
                                BlockedContentID = item.BlockedContentID,
                                BreadcrumbTags = item.BreadcrumbTags,
                                Author = item.Author,
                                Comments = item.Comments,
                                Scope = item.Scope,
                                BlockedContent = item.BlockedContent,
                                PaginatedSubIssues = item.PaginatedSubIssues,
                                PaginatedSolutions = item.PaginatedSolutions!,
                                VoteStats = new UserVote_Issue_ReadVM()
                                {
                                    IssueVotes = item.VoteStats.GenericContentVotes,
                                    AverageVote = item.VoteStats.AverageVote,
                                    ContentID = item.VoteStats.ContentID,
                                    TotalVotes = item.VoteStats.TotalVotes,
                                    ContentType = atlas_the_public_think_tank.Models.Database.ContentType.Issue
                                }
                            });
                        }
                        else if (item.ContentType == atlas_the_public_think_tank.Models.Database.ContentType.Solution)
                        {
                            @await Html.PartialAsync("~/Views/Solution/_solution-card.cshtml", new Solution_ReadVM
                            {
                                SolutionID = item.ContentID,
                                Title = item.Title,
                                Content = item.Content,
                                CreatedAt = item.CreatedAt,
                                ModifiedAt = item.ModifiedAt,
                                LastActivity = item.LastActivity,
                                ContentStatus = item.ContentStatus,
                                BlockedContentID = item.BlockedContentID,
                                BreadcrumbTags = item.BreadcrumbTags,
                                Author = item.Author,
                                Comments = item.Comments,
                                Scope = item.Scope,
                                BlockedContent = item.BlockedContent,
                                PaginatedSubIssues = item.PaginatedSubIssues,
                                VoteStats = new UserVote_Solution_ReadVM()
                                {
                                    SolutionVotes = item.VoteStats.GenericContentVotes,
                                    AverageVote = item.VoteStats.AverageVote,
                                    ContentID = item.VoteStats.ContentID,
                                    TotalVotes = item.VoteStats.TotalVotes,
                                    ContentType = atlas_the_public_think_tank.Models.Database.ContentType.Issue
                                }
                            });
                        }
                        else
                        {
                            <div class="alert alert-warning">
                                Unknown content type: @item.GetType().Name
                            </div>
                        }
                    @*
                        @if (item is Issue_ReadVM issue)
                        {
                            @await Html.PartialAsync("~/Views/Issue/_issue-card.cshtml", issue)
                        }
                        else if (item is Solution_ReadVM solution)
                        {
                            @await Html.PartialAsync("~/Views/Solution/_solution-card.cshtml", solution)
                        }
                        else
                        {
                            <div class="alert alert-warning">
                                Unknown content type: @item.GetType().Name
                            </div>
                        }
                    *@
                    } 
                }
                else
                {
                    <div class="alert alert-info">
                        No posts available. Be the first to create a post!
                    </div>
                }
            </div>

            @await Html.PartialAsync("~/Views/Shared/Components/_pagination-button.cshtml", new PaginationButton_ReadVM
            {
                ElementId = "fetchPaginatedContent",
                        ContentType = "posts",
                        Target = "#main-content",
                        Url = "/home/getPaginatedContent",
                        CurrentPage = Model.PaginatedContent.TotalCount,
                        PageSize = Model.PaginatedContent.PageSize,
                        TotalCount = Model.PaginatedContent.TotalCount,
                        TotalPages = Model.PaginatedContent.TotalPages
                        })



        </div>
        <partial name="_Home-Page-Right-Sidebar" />
    </div>
</div>

@section Scripts {
    <script>
        // Optional JavaScript to filter posts by category
             document.addEventListener("DOMContentLoaded", function() {
                 $('.category-link').click(function(e) {
                     e.preventDefault();
                     var categoryId = $(this).data('category-id');
                     // You can implement filtering logic here
                     console.log('Filter by category ID:', categoryId);
                 });

                 const paginationButton = document.getElementById("fetchPaginatedContent")
                 setPaginationButtonListener(paginationButton)

             });
    </script>
}