@using atlas_the_public_think_tank.Models.Enums
@using atlas_the_public_think_tank.Models.ViewModel
@using atlas_the_public_think_tank.Models.ViewModel.CRUD.ContentItem_Common
@using atlas_the_public_think_tank.Models.ViewModel.CRUD.Issue
@using atlas_the_public_think_tank.Models.ViewModel.CRUD.Issue.IssueVote
@using atlas_the_public_think_tank.Models.ViewModel.CRUD.Solution
@using atlas_the_public_think_tank.Models.ViewModel.CRUD.Solution.SolutionVote
@model List<ContentItem_ReadVM>

@*
    For more information on enabling MVC for empty projects, visit https://go.microsoft.com/fwlink/?LinkID=397860
*@
@{
}


  @foreach (var item in Model)
{

    @if (item.ContentType == ContentType.Issue)
    {
        @await Html.PartialAsync("~/Views/Issue/_issue-card.cshtml", new Issue_ReadVM
        {
            IssueID = item.ContentID,
            Title = item.Title,
            Content = item.Content,
            CreatedAt = item.CreatedAt,
            ModifiedAt = item.ModifiedAt,
            VersionHistoryCount = item.VersionHistoryCount,
            LastActivity = item.LastActivity,
            ContentStatus = item.ContentStatus,
            BlockedContentID = item.BlockedContentID,
            BreadcrumbTags = item.BreadcrumbTags,
            Author = item.Author,
            Comments = item.Comments,
            Scope = item.Scope,
            BlockedContent = item.BlockedContent,
            PaginatedSubIssues = item.PaginatedSubIssues,
            PaginatedSolutions = item.PaginatedSolutions!,
            VoteStats = new IssueVotes_ReadVM()
            {
                IssueVotes = item.VoteStats.GenericContentVotes,
                AverageVote = item.VoteStats.AverageVote,
                ContentID = item.VoteStats.ContentID,
                TotalVotes = item.VoteStats.TotalVotes,
                ContentType = ContentType.Issue
            }
        });
    }
    else if (item.ContentType == ContentType.Solution)
    {
        @await Html.PartialAsync("~/Views/Solution/_solution-card.cshtml", new Solution_ReadVM
        {
            SolutionID = item.ContentID,
            Title = item.Title,
            Content = item.Content,
            CreatedAt = item.CreatedAt,
            ModifiedAt = item.ModifiedAt,
            VersionHistoryCount = item.VersionHistoryCount,
            LastActivity = item.LastActivity,
            ContentStatus = item.ContentStatus,
            BlockedContentID = item.BlockedContentID,
            BreadcrumbTags = item.BreadcrumbTags,
            Author = item.Author,
            Comments = item.Comments,
            Scope = item.Scope,
            BlockedContent = item.BlockedContent,
            PaginatedSubIssues = item.PaginatedSubIssues,
            VoteStats = new SolutionVotes_ReadVM()
            {
                SolutionVotes = item.VoteStats.GenericContentVotes,
                AverageVote = item.VoteStats.AverageVote,
                ContentID = item.VoteStats.ContentID,
                TotalVotes = item.VoteStats.TotalVotes,
                ContentType = ContentType.Issue
            }
        });
    }
    else
    {
        <div class="alert alert-warning">
            Unknown content type: @item.GetType().Name
        </div>
    }
}