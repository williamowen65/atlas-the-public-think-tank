@using atlas_the_public_think_tank.Models.Enums
@using atlas_the_public_think_tank.Models.ViewModel.AjaxVM
@using atlas_the_public_think_tank.Models.ViewModel.UI_VM.FormComponentVM
@model Issue_CreateOrEdit_AjaxVM

@*
Client side scripts tied to this view: ContentCreate.js
*@

@{

    bool isEditMode = Model.Issue.IssueID != null;
}


@* Create new issue description  *@
<form class="border-1 border card mb-3 issue-editor" data-content-type="issue" data-form-url="/edit-issue">
    @*
        asp-controller="Issue" asp-action="CreateIssue" method="post"
        These are controlled via the Ajax in ContentCreate.js
    *@
    @if (!isEditMode)
    {
        <h5 class="card-header text-center ">
            Create a new Issue
        </h5>
    }
    <div class="card-header text-center bg-primary-subtle" style="background: linear-gradient(-299deg, rgba(255, 255, 255, 0.15), rgba(255, 255, 255, 0.3), rgba(255, 255, 255, 0.15));">
        <h5 class="m-0">An issue is a challenge, question, or problem.</h5> <small>Add solutions separately to keep discussions clear.</small>
    </div>
    <div class="card-body d-flex">
        <div class="flex-grow-1 me-4">

            <div asp-validation-summary="ModelOnly" class="text-danger"></div>

            @if (Model.Issue.IssueID != null)
            {
                <input type="hidden" name="IssueID" id="IssueID" value="@Model.Issue.IssueID" />
            }

            @await Html.PartialAsync("~/Views/Shared/FormComponents/FormInput.cshtml", new FormInputVM()
            {
                Model = Model.Issue,
                PropertyName = "Title"
            })

            @await Html.PartialAsync("~/Views/Shared/FormComponents/FormMarkdownEditor/FormMarkdownEditor.cshtml", new FormMarkdownEditorVM()
            {
                Model = Model.Issue,
                PropertyName = "Content",
                Rows = 10
            })

         

        </div>
        <div class="col-4">
            <div class="mb-3">
                Tags Select 2
                @* <label class="form-label">Categories (Tags)</label>
                    <select multiple name="SelectedCategoryIds" class="form-select select2"
                            asp-items="@(new SelectList(Model.Categories, "CategoryID", "CategoryName"))">
                    </select>
                    <span asp-validation-for="SelectedCategoryIds" class="text-danger"></span> *@
            </div>

            @{

                string? selectedScopeId = null;
                if (Model.Issue.ScopeID != null)
                {
                    selectedScopeId = Model.Issue.ScopeID.ToString();
                }

            }

            @await Html.PartialAsync("~/Views/Shared/FormComponents/FormSelect.cshtml", 
            new FormSelectVM()
            {
                Model = Model.Issue,
                PropertyName = "ScopeID",
                ListItems = Model.Scopes.Cast<object>().ToList(),
                FieldLabel = "Scope",
                FieldPlaceholder = "-- Select a Scope --",
                TextField = "ScopeName",
                ValueField = "ScopeID",
                SelectedValue = selectedScopeId

            })
           
        

            @* I would like this to be a select2 as well. except I'd like to render the items specifically to have more content. But I want it to start out empty, because it will use ajax for fetching data and populating the select2. 

            *@


            @if (Model.Issue.ParentSolution == null)
            {
                

                List<object> issueIdList = new List<object>();
                string? selectedParentIssueValue = null;
                if (Model.Issue.ParentIssue != null)
                {    
                    issueIdList.Add(Model.Issue.ParentIssue);
                    selectedParentIssueValue = Model.Issue.ParentIssue.IssueID.ToString();

                }
               
                
                @await Html.PartialAsync("~/Views/Shared/FormComponents/FormSelect.cshtml", 
                new FormSelectVM()
                {
                    Model = Model.Issue.ParentIssue,
                    FieldLabel = "Parent Issue",
                    FieldPlaceholder = "-- Select a Parent Issue --",
                    PropertyName = "ParentIssueID",
                    TextField = "Title",
                    ValueField = "IssueID",
                    DisabledField = selectedParentIssueValue != null ? true : false,
                    ListItems = issueIdList,
                    SelectedValue = selectedParentIssueValue
                })
            }

            @if (Model.Issue.ParentIssue == null)
            {
                

                List<object> solutionIdList = new List<object>();
                string? selectedParentSolutionValue = null;
                if (Model.Issue.ParentSolution != null)
                {
                    solutionIdList.Add(Model.Issue.ParentSolution);
                    selectedParentSolutionValue = Model.Issue.ParentSolution.SolutionID.ToString();
                }
              
                @await Html.PartialAsync("~/Views/Shared/FormComponents/FormSelect.cshtml", 
                new FormSelectVM()
                {
                    Model = Model.Issue.ParentSolution,
                    FieldLabel = "Parent Solution",
                    FieldPlaceholder = "-- Select a Parent Solution--",
                    PropertyName = "ParentSolutionID",
                    TextField = "Title",
                    ValueField = "SolutionID",
                    ListItems = solutionIdList,
                    SelectedValue  =selectedParentSolutionValue,
                    DisabledField = selectedParentSolutionValue != null ? true : false,
                })

            }



        </div>
    </div>
    <div class="card-footer">
        <div class=" ms-auto d-flex">
            @if (Model.Issue.ContentStatus == null)
            {
                <button class="create-issue-draft btn btn-sm btn-secondary fw-bold ms-auto" type="submit">Create as Draft</button>
                <button class="publish-issue btn btn-sm btn-primary fw-bold ms-2" type="submit">Publish Issue</button>
            }
            @if (Model.Issue.ContentStatus == ContentStatus.Draft)
            {
                <button class="update-issue-draft btn btn-sm btn-secondary fw-bold ms-auto" type="submit">Update Draft</button>
                <button class="publish-issue btn btn-sm btn-primary fw-bold ms-2" type="submit">Publish Issue</button>
            }
            @if (Model.Issue.ContentStatus == ContentStatus.Published)
            {

                <button class="btn btn-primary btn-sm fw-bold ms-auto update-issue w-fit" type="submit">Update Issue Post</button>
            }
        </div>
    </div>
</form>


               