@using atlas_the_public_think_tank.Data.DatabaseEntities.Content.Common
@using atlas_the_public_think_tank.Models.Enums
@using atlas_the_public_think_tank.Models.ViewModel.AjaxVM
@using atlas_the_public_think_tank.Models.ViewModel.UI_VM.FormComponentVM
@model Issue_CreateOrEdit_AjaxVM

@*
Client side scripts tied to this view: ContentCreate.js
*@

@{

    bool isEditMode = Model.Issue.IssueID != null;
}


@* Create new issue description  *@
<form class="border-1 border card mb-3 issue-editor" data-content-type="issue" data-form-url="/edit-issue">
    @*
        asp-controller="Issue" asp-action="CreateIssue" method="post"
        These are controlled via the Ajax in ContentCreate.js
    *@
    @Html.AntiForgeryToken()
    @if (!isEditMode)
    {
        <h5 class="card-header text-center ">
            Create a new Issue
        </h5>
    }
    <div class="card-header text-center bg-primary-subtle" style="background: linear-gradient(-299deg, rgba(255, 255, 255, 0.15), rgba(255, 255, 255, 0.3), rgba(255, 255, 255, 0.15));">
        <h5 class="m-0">An issue is a challenge, question, or problem.</h5> <small>Add solutions separately to keep discussions clear.</small>
    </div>
    <div class="card-body d-flex flex-md-row flex-column">
        <div class="flex-grow-1 me-md-4">

            <div asp-validation-summary="ModelOnly" class="text-danger"></div>

            @if (Model.Issue.IssueID != null)
            {
                <input type="hidden" name="IssueID" id="IssueID" value="@Model.Issue.IssueID" />
            }

            @await Html.PartialAsync("~/Views/Shared/FormComponents/FormInput.cshtml", new FormInputVM()
            {
                Model = Model.Issue,
                PropertyName = "Title"
            })

            @await Html.PartialAsync("~/Views/Shared/FormComponents/FormMarkdownEditor/FormMarkdownEditor.cshtml", new FormMarkdownEditorVM()
            {
                Model = Model.Issue,
                PropertyName = "Content",
                Rows = 10
            })

            @* @await Html.PartialAsync("~/Views/Shared/FormComponents/FormSelect.cshtml",
            new FormSelectVM()
            {
                Model = Model.Issue,
                FieldLabel = "Tags",
                FieldPlaceholder = "-- Select Tags --",
                PropertyName = "Text",
                TextField = "Text",
                ValueField = "Value",
                ListItems = {},
            }) *@

         
        </div>
        <div class="col-md-4 col-12">

            @await Html.PartialAsync("~/Views/Issue/FormComponents/_ParentContentFields.cshtml",Model)

            @await Html.PartialAsync("~/Views/Shared/FormComponents/_ScopeFields.cshtml", Model.Issue.Scope)

        </div>
    </div>
    <div class="card-footer">
        <div class=" ms-auto d-flex">
            @if (Model.Issue.ContentStatus == null)
            {
                <button class="create-issue-draft btn btn-sm btn-secondary fw-bold ms-auto" type="submit">Create as Draft</button>
                <button class="publish-issue btn btn-sm btn-primary fw-bold ms-2" type="submit">Publish Issue</button>
            }
            @if (Model.Issue.ContentStatus == ContentStatus.Draft)
            {
                <button class="update-issue-draft btn btn-sm btn-secondary fw-bold ms-auto" type="submit">Update Draft</button>
                <button class="publish-issue btn btn-sm btn-primary fw-bold ms-2" type="submit">Publish Issue</button>
            }
            @if (Model.Issue.ContentStatus == ContentStatus.Published)
            {

                <button class="btn btn-primary btn-sm fw-bold ms-auto update-issue w-fit" type="submit">Update Issue Post</button>
            }
        </div>
    </div>
</form>


               