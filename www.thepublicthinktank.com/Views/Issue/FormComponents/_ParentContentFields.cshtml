@using atlas_the_public_think_tank.Models.ViewModel.AjaxVM
@using atlas_the_public_think_tank.Models.ViewModel.UI_VM.FormComponentVM
@model Issue_CreateOrEdit_AjaxVM

<fieldset style="all:revert" class="parent-fieldset">
    <legend style="all:revert">Create issue as sub-issue <small><i>(Optional)</i></small></legend>

    @if (Model.Issue.ParentSolution == null)
    {
        List<object> issueIdList = new List<object>();
        string? selectedParentIssueValue = null;
        string? select2TemplateCallback = null;
        string? parentIssueIdFromQuery = Context.Request.Query["parentIssueID"].FirstOrDefault();
        bool hasParentIssueIdQuery = !string.IsNullOrEmpty(parentIssueIdFromQuery);
        if (Model.Issue.ParentIssue != null)
        {
            issueIdList.Add(Model.Issue.ParentIssue);
            selectedParentIssueValue = Model.Issue.ParentIssue.IssueID.ToString();
            select2TemplateCallback = $"/issue/get-issue-select2-template/{selectedParentIssueValue}";

        }

        <div class="parentIssueSelectContainer">


        @await Html.PartialAsync("~/Views/Shared/FormComponents/FormSelect.cshtml",
                    new FormSelectVM()
                {
                    Model = Model.Issue.ParentIssue,
                    FieldLabel = "Parent Issue",
                    FieldPlaceholder = "-- Select a Parent Issue --",
                    PropertyName = "ParentIssueID",
                    TextField = "Title",
                    ValueField = "IssueID",
                    DisabledField = hasParentIssueIdQuery,
                    ListItems = issueIdList,
                    SelectedValue = selectedParentIssueValue,
                    Select2TemplateCallback = select2TemplateCallback,
                    Select2ConfigurationCallback = "getParentIssueSelect2Config",
                    Select2ListenerCallback = "setParentIssueSelect2Listener"
                })

        </div>

    }

    @if (Model.Issue.ParentIssue == null)
    {
        List<object> solutionIdList = new List<object>();
        string? selectedParentSolutionValue = null;
        string? select2TemplateCallback = null;
        string? parentSolutionIdFromQuery = Context.Request.Query["parentSolutionID"].FirstOrDefault();
        bool hasParentSolutionIdQuery = !string.IsNullOrEmpty(parentSolutionIdFromQuery);
        if (Model.Issue.ParentSolution != null)
        {
            solutionIdList.Add(Model.Issue.ParentSolution);
            selectedParentSolutionValue = Model.Issue.ParentSolution.SolutionID.ToString();
            select2TemplateCallback = $"/solution/get-solution-select2-template/{selectedParentSolutionValue}";
        }
        <div class="parentSolutionSelectContainer">

        @await Html.PartialAsync("~/Views/Shared/FormComponents/FormSelect.cshtml",
        new FormSelectVM()
        {
            Model = Model.Issue.ParentSolution,
            FieldLabel = "Parent Solution",
            FieldPlaceholder = "-- Select a Parent Solution --",
            PropertyName = "ParentSolutionID",
            TextField = "Title",
            ValueField = "SolutionID",
            ListItems = solutionIdList,
            SelectedValue = selectedParentSolutionValue,
            DisabledField = hasParentSolutionIdQuery,
            Select2TemplateCallback = select2TemplateCallback,
            Select2ConfigurationCallback = "getParentSolutionSelect2Config",
            Select2ListenerCallback = "setParentSolutionSelect2Listener"
        })
        </div>
    }
</fieldset>
