@using System.ComponentModel.DataAnnotations
@using atlas_the_public_think_tank.Models.Database
@model CreateIssuePageViewModel;

@{
    // Console.WriteLine("test");
}



<div class="m-1 create-issue-page" >

    @* Create new issue description  *@
    <form class="border-1 border card" asp-controller="Issue" asp-action="CreateIssue" method="post">
        <h5 class="card-header text-center ">
            Create a new Issue
        </h5>
        <div class="card-header text-center bg-primary-subtle" style="background: linear-gradient(-299deg, rgba(255, 255, 255, 0.15), rgba(255, 255, 255, 0.3), rgba(255, 255, 255, 0.15));">
            <h5 class="m-0">An issue is a challenge, question, or problem.</h5> <small>Add solutions separately to keep discussions clear.</small>
        </div>
        <div class="card-body d-flex">
            <div class="flex-grow-1 me-4">

            <div asp-validation-summary="ModelOnly" class="text-danger"></div>

                @await Html.PartialAsync("~/Views/Shared/FormComponents/FormInput.cshtml", Model.MainIssue, new ViewDataDictionary(ViewData)
                {
                    { "PropertyName", "Title" },
                })

                @await Html.PartialAsync("~/Views/Shared/FormComponents/FormMarkdownEditor/FormMarkdownEditor.cshtml", Model.MainIssue, new ViewDataDictionary(ViewData)
                {
                    { "PropertyName", "Content" },
                    { "Rows", 10 },
                })

            </div>
            <div>
                <div class="mb-3">
                    Tags Select 2
                    @* <label class="form-label">Categories (Tags)</label>
                    <select multiple name="SelectedCategoryIds" class="form-select select2"
                            asp-items="@(new SelectList(Model.Categories, "CategoryID", "CategoryName"))">
                    </select>
                    <span asp-validation-for="SelectedCategoryIds" class="text-danger"></span> *@
                </div>
                <div class="mb-3">
                    Scope Select 2
                    @* <label asp-for="ScopeID" class="form-label">Scope</label>
                    <select asp-for="ScopeID" class="form-select select2"
                            asp-items="@(new SelectList(Model.Scopes, "ScopeID", "ScopeName"))">
                        <option value="">-- Select a Scope --</option>
                    </select>
                    <span asp-validation-for="ScopeID" class="text-danger"></span> *@
                </div>

                @* I would like this to be a select2 as well. except I'd like to render the items specifically to have more content. But I want it to start out empty, because it will use ajax for fetching data and populating the select2. 

           

            *@



                <div class="mb-3">
                    Parent Issue Select 2

                    @* <label asp-for="ParentIssueID" class="form-label">Parent Issue (Optional)</label>
                    <select asp-for="ParentIssueID" class="form-control select2-parent">
                        @if (Model.ParentIssueID != null)
                        {
                            <option value="@Model.ParentIssueID" selected>Current parent issue (ID: @Model.ParentIssueID)</option>
                        }
                    </select>
                    <span asp-validation-for="ParentIssueID" class="text-danger"></span> *@
                </div>

                <div class="mb-3">
                    Parent Solution Select 2
                    @* <label asp-for="ParentSolutionID" class="form-label">Parent Solution (Optional)</label>
                    <select asp-for="ParentSolutionID" class="form-control select2-parent">
                        @if (Model.ParentSolutionID != null)
                        {
                            <option value="@Model.ParentSolutionID" selected>Current parent issue (ID: @Model.ParentSolutionID)</option>
                        }
                    </select>
                    <span asp-validation-for="ParentSolutionID" class="text-danger"></span> *@
                </div>


            </div>
        </div>
        <div class="card-footer">
            <div class="col-6 mx-auto d-flex">
                <button asp-controller="Issue" asp-action="CreateIssue" asp-route-contentStatus="@ContentStatus.Draft" class="btn btn-primary fw-bold fs-4" type="submit">Save Draft</button>
                <button id="publish-issue" asp-route-contentStatus="@ContentStatus.Published" class="btn btn-primary fw-bold fs-4 ms-2 flex-grow-1" type="submit">Publish Issue</button>
            </div>
        </div>
    </form>

    @* Solutions will be set in this container*@
    <div class="issue-solutions"></div>



   
    <div class="col-6 mx-auto mt-2 d-flex">
        <button id="add-solution" class="btn btn-success fw-bold fs-4 flex-grow-1" type="button">Add Solution</button>
    </div>

    <template id="create-solution-template">
        <form class="border-1 border card" asp-controller="Solution" asp-action="CreateSolution" method="post">
            @Html.AntiForgeryToken()
            <h5 class="card-header text-center ">
                Solution <span class="solution-count"></span>
            </h5>
            <div class="card-header text-center bg-success" style="background: linear-gradient(-299deg, rgba(255, 255, 255, 0.3), rgba(255, 255, 255, 0.15), rgba(255, 255, 255, 0.3));">
                <h5 class="m-0">A solution is a proposed answer, idea, or approach to an issue.</h5> <small>(This should be addressing the issue that you wrote)</small>
            </div>
            <div class="card-body d-flex">
                <div class="flex-grow-1 me-4">

                    <div asp-validation-summary="ModelOnly" class="text-danger"></div>

                    @await Html.PartialAsync("~/Views/Shared/FormComponents/FormInput.cshtml", new CreateSolutionViewModel(), new ViewDataDictionary(ViewData)
                                        {
                        { "PropertyName", "Title" },
                                        })

                    @await Html.PartialAsync("~/Views/Shared/FormComponents/FormMarkdownEditor/FormMarkdownEditor.cshtml", new CreateSolutionViewModel(), new ViewDataDictionary(ViewData)
                                        {
                        { "PropertyName", "Content" },
                                        { "Rows", 10 },
                                        })

                </div>
                <div>
                    <div class="mb-3">
                        Tags Select 2
                        @* <label class="form-label">Categories (Tags)</label>
             <select multiple name="SelectedCategoryIds" class="form-select select2"
                     asp-items="@(new SelectList(Model.Categories, "CategoryID", "CategoryName"))">
             </select>
             <span asp-validation-for="SelectedCategoryIds" class="text-danger"></span> *@
                    </div>
                    <div class="mb-3">
                        Scope Select 2
                        @* <label asp-for="ScopeID" class="form-label">Scope</label>
             <select asp-for="ScopeID" class="form-select select2"
                     asp-items="@(new SelectList(Model.Scopes, "ScopeID", "ScopeName"))">
                 <option value="">-- Select a Scope --</option>
             </select>
             <span asp-validation-for="ScopeID" class="text-danger"></span> *@
                    </div>

                    @* I would like this to be a select2 as well. except I'd like to render the items specifically to have more content. But I want it to start out empty, because it will use ajax for fetching data and populating the select2. 

    

     *@



             @*        <div class="mb-3">
                        Parent Issue Select 2

                        @* <label asp-for="ParentIssueID" class="form-label">Parent Issue (Optional)</label>
             <select asp-for="ParentIssueID" class="form-control select2-parent">
                 @if (Model.ParentIssueID != null)
                 {
                     <option value="@Model.ParentIssueID" selected>Current parent issue (ID: @Model.ParentIssueID)</option>
                 }
             </select>
             <span asp-validation-for="ParentIssueID" class="text-danger"></span> 
                    </div> *@

                

                 
                </div>
            </div>
            <div class="card-footer">
                <div class="col-6 mx-auto d-flex">
                    <button formaction="/create-solution?contentStatus=@ContentStatus.Draft" class="btn btn-primary fw-bold fs-4" type="submit">Save Draft</button>
                    <button formaction="/create-solution?contentStatus=@ContentStatus.Published"  class="publish-solution btn btn-primary fw-bold fs-4 ms-2 flex-grow-1" type="submit">Publish Solution</button>
                </div>
            </div>
        </form>
    </template>

</div>

<script>
         document.addEventListener("DOMContentLoaded", ()=>{

        const addSolutionButton = document.querySelector("#add-solution")

        addSolutionButton.addEventListener("click", ()=>{
            const template = document.querySelector("#create-solution-template")
            const target = document.querySelector(".issue-solutions")
            const publishIssueBtn = document.querySelector("#publish-issue")

            // Create a deep copy of the template content
            const newSolution = template.content.cloneNode(true);

            // Find the solution count element and update it
            const solutionCount = target.querySelectorAll('.border-1.border.card').length + 1;
            const solutionCountElement = newSolution.querySelector('.solution-count');
            if (solutionCountElement) {
                solutionCountElement.textContent = '#' + solutionCount;
            }

            // Generate unique IDs for form fields in the cloned solution
            const solutionIndex = solutionCount - 1;

            // Process FormInput fields
            const formInputs = newSolution.querySelectorAll('.form-field');
            formInputs.forEach(field => {
                const uniqueId = `solution_${solutionIndex}_field_${Math.random().toString(36).substring(2, 15)}`;
                field.id = uniqueId;

                const textarea = field.querySelector('textarea');
                const propertyName = textarea.id;
                // Update name to make it unique per solution (for form submission)
                textarea.name = `Solutions[${solutionIndex}].${propertyName}`;

                // Clear any existing value
                textarea.value = '';
            });

            // Process FormMarkdownEditor fields
            const markdownEditors = newSolution.querySelectorAll('.form-field-markdown-editor');
            markdownEditors.forEach(field => {
                const uniqueId = `solution_${solutionIndex}_field_${Math.random().toString(36).substring(2, 15)}`;
                field.id = uniqueId;

                const textarea = field.querySelector('textarea');
                const propertyName = textarea.id;
                // Update name to make it unique per solution (for form submission)
                textarea.name = `Solutions[${solutionIndex}].${propertyName}`;

                // Clear any existing value
                textarea.value = '';
            });

            // Append the cloned node to the target
            target.appendChild(newSolution);

            // Initialize form fields
            // Find all form fields in the newly added solution
            const newFormInputs = target.querySelectorAll(`.card:nth-child(${solutionCount}) .form-field`);
            newFormInputs.forEach(field => {
                const textarea = field.querySelector('textarea');
                const maxLength = 300; // Default max length
                setupFormField(textarea.id, maxLength, field.id);
            });

           
        });

            
    });
</script>
