@model Issue_ReadVM;
@{
    ViewData["Title"] = Model.Title;
}

<div class="container mt-3  ">

    @Html.Partial("~/Views/Issue/_issue-page-post.cshtml", Model)

    <nav class="d-flex">
        <div class="nav nav-tabs flex-grow-1 text-nowrap overflow-x-scroll overflow-y-hidden" style="flex-wrap: revert;" id="nav-tab" role="tablist">
            <button class="nav-link active" id="solutions-tab" data-bs-toggle="tab" data-bs-target="#solutions" type="button" role="tab" aria-controls="nav-home" aria-selected="true">
                <div class="content-count">@Model.SolutionVM.Count()</div>
                @Html.Partial("~/Views/Shared/Icons/_Solutions.cshtml")
                Solutions
            </button>
            <button class="nav-link" id="issue-comments-tab" data-bs-toggle="tab" data-bs-target="#issue-comments" type="button" role="tab" aria-controls="nav-profile" aria-selected="false">
                <div class="content-count">@Model.Comments.Count()</div>
                @Html.Partial("~/Views/Shared/Icons/_Comments.cshtml")
                Comments
            </button>
            <button class="nav-link" id="sub-issues-tab" data-bs-toggle="tab" data-bs-target="#sub-issues" type="button" role="tab" aria-controls="nav-profile" aria-selected="false">
                <div class="content-count">@Model.SubIssues.Count()</div>
                @Html.Partial("~/Views/Shared/Icons/_SubIssues.cshtml")
                Sub-Issues
            </button>
            <button class="nav-link d-flex align-items-center" id="parent-issue-tab" data-bs-toggle="tab" data-bs-target="#parent-issue" type="button" role="tab" aria-controls="nav-profile" aria-selected="false">
                <div class="content-count">
                    <span>@(Model.ParentIssueVM != null ? 1 : 0)</span>
                </div>
                <div class="me-2">
                    @Html.Partial("~/Views/Shared/Icons/_ParentIssue.cshtml")
                </div>

                Parent Issue
            </button>
       <li class="nav-item dropdown ms-auto">
  
</li>
          
        </div>
        <div class="ms-2 pt-2">

        <a class="nav-link dropdown-toggle" data-bs-toggle="dropdown" href="#" role="button" aria-expanded="false" id="actionDropdown">
            @Html.Partial("~/Views/Shared/Icons/_ActionsIcon.cshtml")
            Actions
        </a>
        <ul class="dropdown-menu" id="dynamic-actions">
            <!-- Content will be dynamically populated -->
        </ul>
        </div>
    </nav>
    <div class="tab-content" id="nav-tabContent">
        <div class="tab-pane fade show active border border-1 border-top-0" id="solutions" role="tabpanel" aria-labelledby="solutions-tab" tabindex="0">

            @if (Model.SolutionVM.Count() == 0)
            {
                <div id="empty-issueView-solution-feed" class="empty-feed ">
                    <div class="comment-feed">
                        <div class="content">
                            <h2>Empty Solution Feed</h2>
                            <a href="@Url.Action("CreateSolution","CRUDIssue")">
                                <button class="outlined-text">Create a Solution</button>
                            </a>
                        </div>
                    </div>
                </div>
            }
            else
            {
                foreach (Solution_ReadVM model in Model.SolutionVM)
                {
                    // Fetch the sub issue
                    @Html.Partial("~/Views/Issue/_solution-card.cshtml", model);
                }

            }

        </div>
        <div class="tab-pane fade border border-1 border-top-0" id="issue-comments" role="tabpanel" aria-labelledby="issue-comments-tab" tabindex="0">

            @if (Model.Comments.Count() == 0)
            {
                <div id="empty-issueView-comment-feed" class="empty-feed">
                    <div class="comment-feed">
                        <div class="content">
                            <h2>Empty Comment Feed</h2>
                            <button class="outlined-text">Start a Discussion</button>
                        </div>
                    </div>
                </div>
            }
            else
            {

                <p>Comment feed for this issue</p>
            }
        </div>
        <div class="tab-pane fade border border-1 border-top-0" id="sub-issues" role="tabpanel" aria-labelledby="sub-issues-tab" tabindex="0">
            @if (Model.SubIssues.Count() == 0)
            {
                <div id="empty-issueView-sub-issues-feed" class="empty-feed">

                    <div class="comment-feed">
                        <div class="content">
                            <h2>Empty Sub Issues Feed</h2>
                            <a target="_blank" href="@Url.Action("CreateIssue", "CRUDIssue", new { parentIssueID = Model.IssueID })">
                                <button class="outlined-text">Create Sub-Issue</button>
                            </a>

                        </div>
                    </div>
                </div>
            }
            else
            {
                foreach (Issue_ReadVM model in Model.SubIssues)
                {

                    // Fetch the sub issue
                    @Html.Partial("~/Views/Issue/_issue-card.cshtml", model);
                }

            }
        </div>

        <div class="tab-pane fade border border-1 border-top-0" id="parent-issue" role="tabpanel" aria-labelledby="parent-issue-tab" tabindex="0">
            @if (Model.ParentIssueVM != null)
            {
                @Html.Partial("~/Views/Issue/_issue-card.cshtml", Model.ParentIssueVM);
            }
            else
            {
                <p class="empty-feed">There is no parent issue</p>
            }
        </div>
    </div>
</div>

<script>
    document.addEventListener("DOMContentLoaded", function() {
        dynamicDropdownContent();
        // Initialize vote dials on tab show event
        const subIssuesTab = document.getElementById('sub-issues-tab');
        const parentIssueTab = document.getElementById('parent-issue-tab');

        if (subIssuesTab) {
            subIssuesTab.addEventListener('shown.bs.tab', function (e) {
                console.log('Sub-issues tab activated - reinitializing vote dials');
                reinitializeVoteDials('sub-issues');
            });
        }

        if (parentIssueTab) {
            parentIssueTab.addEventListener('shown.bs.tab', function (e) {
                console.log('Parent issue tab activated - reinitializing vote dials');
                reinitializeVoteDials('parent-issue');
            });
        }

        // Function to find all issue cards in a tab and reinitialize vote dials
        function reinitializeVoteDials(tabId) {
            const tabPane = document.getElementById(tabId);
            if (!tabPane) return;

            const issueCards = tabPane.querySelectorAll('[id^="issue-"]');

            issueCards.forEach(card => {
                // Extract the issue ID from the card's ID attribute
                const issueId = card.id.replace('issue-', '');
                console.log(`Reinitializing vote dial for issue ${issueId}`);

                const dialContainer = card.querySelector('.dial-container');
                if (dialContainer) {
                    // Check if dial content already exists
                    if (dialContainer.children.length > 0) {
                        // If vote container exists, just reinitialize it
                        const voteContainer = document.getElementById(`vote-toggle-container-${issueId}`);
                        if (voteContainer) {
                            setTimeout(() => {
                                // Reinitialize with a slight delay to ensure proper rendering
                                initializeVoteDial(issueId);
                            }, 50);
                        } else {
                            // If vote container doesn't exist, need to fetch the dial
                            fetchAndInitializeVoteDial(issueId, dialContainer);
                        }
                    } else {
                        // If no dial content, fetch it
                        fetchAndInitializeVoteDial(issueId, dialContainer);
                    }
                }
            });
        }

        // Helper function to fetch and initialize vote dials
        function fetchAndInitializeVoteDial(issueId, dialContainer) {
            fetch(`/api/GetVoteDial?issueId=${issueId}`)
                .then(response => response.text())
                .then(data => {
                    dialContainer.innerHTML = data;
                    setTimeout(() => {
                        initializeVoteDial(issueId);
                    }, 50);
                })
                .catch(error => console.error(`Error fetching vote dial for issue ${issueId}:`, error));
        }
    });

function dynamicDropdownContent(){
    const dropdownMenu = document.getElementById('dynamic-actions');
    
    // Menu content templates for each tab
    const menuTemplates = {
        'solutions-tab': `
            <li><a class="dropdown-item" href="@Url.Action("CreateSolution","CRUDIssue", new { IssueId = Model.IssueID})">Create Solution</a></li>
            <li><a class="dropdown-item" href="#">Sort Solutions</a></li>
            <li><hr class="dropdown-divider"></li>
            <li><a class="dropdown-item" href="#">Filter Solutions</a></li>
        `,
        'issue-comments-tab': `
            <li><a class="dropdown-item" href="#">Add Comment</a></li>
            <li><a class="dropdown-item" href="#">Report Comment</a></li>
            <li><hr class="dropdown-divider"></li>
            <li><a class="dropdown-item" href="#">Show Oldest First</a></li>
        `,
        'sub-issues-tab': `
                <li><a class="dropdown-item" href="@Url.Action("CreateIssue", "CRUDIssue", new { parentIssueID = Model.IssueID })">Create Sub-Issue</a></li>
            <li><a class="dropdown-item" href="#">Sort Sub-Issues</a></li>
        `,
        'parent-issue-tab': `
            <li><a class="dropdown-item" href="#">Go to Parent Issue</a></li>
            <li><a class="dropdown-item" href="#">Remove Parent Relationship</a></li>
        `
    };
    
    // Function to update dropdown content based on active tab
    function updateDropdownContent(activeTabId) {
        if (dropdownMenu && menuTemplates[activeTabId]) {
            dropdownMenu.innerHTML = menuTemplates[activeTabId];
        }
    }
    
    // Initialize with default tab content
    updateDropdownContent('solutions-tab');
    
    // Add event listeners to all tabs
    const tabs = document.querySelectorAll('[data-bs-toggle="tab"]');
    tabs.forEach(tab => {
        tab.addEventListener('shown.bs.tab', function(event) {
            updateDropdownContent(event.target.id);
        });
    });
}
</script>


<script src="~/js/remember-tab.js"></script>