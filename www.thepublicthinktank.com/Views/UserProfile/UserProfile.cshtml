@using Microsoft.AspNetCore.Identity
@using atlas_the_public_think_tank.Data.DatabaseEntities.Users
@using atlas_the_public_think_tank.Models.ViewModel.PageVM
@using atlas_the_public_think_tank.Models.ViewModel.UI_VM
@model UserProfile_PageVM
@inject UserManager<AppUser> UserManager
@inject SignInManager<AppUser> SignInManager
@* User Profile Layout *@
@{
    ViewData["Title"] = "User Profile";
}


<div class="container profile-page py-4">
    <div class="profile-header mb-5">
        <div class="profile-banner " role="img" aria-label="User banner image">
            <div class="d-flex justify-content-center">
                <div class="user-banner-info d-flex align-items-center w-100">
                    <div class="profile-avatar-wrapper my-5 mx-auto" style="width: 295px;">
                        <div class="d-flex align-items-center justify-content-between" style="min-width: 100%;">
                            <button type="button" class="user-profile-action-btn">
                                @* Send mail to @Model.appUserVM.email *@
                                @await Html.PartialAsync("~/Views/Shared/Icons/_send-message-icon.cshtml")
                            </button>
                            <img class="profile-avatar" src="https://github.com/mdo.png" alt="User avatar" />
                            <button type="button" class="user-profile-action-btn">
                                @await Html.PartialAsync("~/Views/Shared/Icons/_follow-user-icon.cshtml")
                            </button>
                        </div>
                        <div class="profile-identity">
                            <h1>@Model.appUserVM.UserName</h1>
                            <div class="handle">@Model.appUserVM.email</div>
                            <small class="text-muted">Senior Research Analyst | Joined Jan 2025</small>
                        </div>
                    </div>
                </div>
            </div>

            <div class="profile-stats-bar">
                <div class="stat-items text-center" aria-label="User statistics">
                    <div class="stat"><strong>@Model.userStats.Followers</strong>Followers</div>
                    <div class="stat"><strong>@Model.userStats.Following</strong>Following</div>
                    @* <div class="stat"><strong>@Model.userStats.Projects</strong>Projects</div>   *@
                </div>
            </div>

            @{
                var isSignedIn = SignInManager.IsSignedIn(User);
                bool isOwner = false;
                if (isSignedIn)
                {
                    isOwner = UserManager.GetUserId(User) == Model.appUserVM.Id.ToString();
                }
            }

            @if (isOwner)
            {
                <button class="btn btn-primary edit-profile">
                    Edit Profile
                </button>
            }
        </div>
    </div>



    <section class="profile-tabs" data-profile-tabs>
        <ul class="tab-list nav nav-tabs justify-content-center" id="profileTabs" role="tablist">
            <li class="nav-item" role="presentation">
                <button class="nav-link active position-relative"
                        id="tab-issue"
                        data-bs-toggle="tab"
                        data-bs-target="#panel-issue"
                        type="button"
                        role="tab"
                        aria-controls="panel-issue"
                        aria-selected="true">
                    Issues
                    <strong class="content-count">@Model.paginatedUserIssues.ContentCount.FilteredCount</strong>
                </button>
            </li>
            <li class="nav-item" role="presentation">
                <button class="nav-link position-relative"
                        id="tab-solution"
                        data-bs-toggle="tab"
                        data-bs-target="#panel-solution"
                        type="button"
                        role="tab"
                        aria-controls="panel-solution"
                        aria-selected="false">
                    Solutions
                    <strong class="content-count">@Model.paginatedUserSolutions.ContentCount.FilteredCount</strong>
                </button>
            </li>
            <li class="nav-item" role="presentation">
                <button class="nav-link"
                        id="tab-projects"
                        data-bs-toggle="tab"
                        data-bs-target="#panel-projects"
                        type="button"
                        role="tab"
                        aria-controls="panel-projects"
                        aria-selected="false">
                    Projects
                </button>
            </li>
            <li class="nav-item" role="presentation">
                <button class="nav-link"
                        id="tab-history"
                        data-bs-toggle="tab"
                        data-bs-target="#panel-history"
                        type="button"
                        role="tab"
                        aria-controls="panel-history"
                        aria-selected="false">
                    History
                </button>
            </li>
            <li class="nav-item" role="presentation">
                <button class="nav-link"
                        id="tab-stats"
                        data-bs-toggle="tab"
                        data-bs-target="#panel-stats"
                        type="button"
                        role="tab"
                        aria-controls="panel-stats"
                        aria-selected="false">
                    Stats
                </button>
            </li>
        </ul>

        <div class="tab-panels tab-content" id="profileTabsContent">
            <div id="panel-issue" class="tab-panel tab-pane fade show active" role="tabpanel" aria-labelledby="tab-issue" tabindex="0">
                <div class="feed" data-feed="issue">
                    <div id="user-issue-content" class="pt-3">

                        @if (Model.paginatedUserIssues.Issues != null && Model.paginatedUserIssues.Issues.Any())
                        {
                            @await Html.PartialAsync("~/Views/Issue/_issue-cards.cshtml", Model.paginatedUserIssues.Issues)
                        }
                        else
                        {
                            <div id="empty-user-issues-feed" class="empty-feed">
                                This user has not created any issues
                            </div>
                        }
                    </div>


                    @await Html.PartialAsync("~/Views/Shared/Components/_pagination-button.cshtml", new PaginationButton_VM
                    {
                        ElementId = "fetchPaginatedUserIssues",
                        ContentType = "user issues",
                        Target = "#user-issue-content",
                        Url = "/user-profile/getPaginatedUserIssues/" + @Model.appUserVM.Id,
                        CurrentPage = Model.paginatedUserIssues.ContentCount.FilteredCount,
                        PageSize = Model.paginatedUserIssues.PageSize,
                        TotalCount = Model.paginatedUserIssues.ContentCount.FilteredCount,
                    })
                </div>
            </div>
            <div id="panel-solution" class="tab-panel tab-pane fade" role="tabpanel" aria-labelledby="tab-solution" tabindex="0">
                <div class="feed" data-feed="solution">
                    <div id="user-solution-content" class="pt-3">

                        @if (Model.paginatedUserSolutions.Solutions != null && Model.paginatedUserSolutions.Solutions.Any())
                        {
                            @await Html.PartialAsync("~/Views/Solution/_solution-cards.cshtml", Model.paginatedUserSolutions.Solutions)
                        }
                        else
                        {
                            <div id="empty-user-solution-feed" class="empty-feed">
                                This user has not created any solutions
                            </div>
                        }
                    </div>

                    @await Html.PartialAsync("~/Views/Shared/Components/_pagination-button.cshtml", new PaginationButton_VM
                    {
                        ElementId = "fetchPaginatedUserSolutions",
                        ContentType = "user solutions",
                        Target = "#user-solution-content",
                        Url = "/user-profile/getPaginatedUserSolutions/" + @Model.appUserVM.Id,
                        CurrentPage = Model.paginatedUserSolutions.ContentCount.FilteredCount,
                        PageSize = Model.paginatedUserSolutions.PageSize,
                        TotalCount = Model.paginatedUserSolutions.ContentCount.FilteredCount,
                    })
                </div>
            </div>
            <div id="panel-projects" class="tab-panel tab-pane fade" role="tabpanel" aria-labelledby="tab-projects" tabindex="0">
                <h2 class="h5">Projects</h2>
                <p class="text-muted">Collaborative or owned research projects.</p>
                <div class="feed" data-feed="projects">
                    <p>(Projects grid placeholder)</p>
                </div>
            </div>
            <div id="panel-history" class="tab-panel tab-pane fade" role="tabpanel" aria-labelledby="tab-history" tabindex="0">
                <h2 class="h5">Revision / Participation History</h2>
                <div class="feed" data-feed="history">
                    @foreach (var entry in Model.userHistory)
                    {
                        @await Html.PartialAsync("~/Views/UserProfile/_UserHistoryEntry.cshtml", entry)
                    }
                </div>
            </div>
            <div id="panel-stats" class="tab-panel tab-pane fade" role="tabpanel" aria-labelledby="tab-stats" tabindex="0">
                <h2 class="h5">Engagement & Impact</h2>
                <div class="feed" data-feed="stats">
                    <p>(Charts / metrics placeholder)</p>
                </div>
            </div>
        </div>
    </section>
</div>

<script>
document.addEventListener("DOMContentLoaded", function() {
    initTabbedForum({
        paginationButtonId: "fetchPaginatedUserIssues",
        tabId: 'tab-issue'
    });
    initTabbedForum({
        paginationButtonId: "fetchPaginatedUserSolutions",
        tabId: 'tab-solution'
    });       
})

</script>