@using Microsoft.AspNetCore.Identity
@using atlas_the_public_think_tank.Data.DatabaseEntities.Users
@using atlas_the_public_think_tank.Models.ViewModel.PageVM
@using atlas_the_public_think_tank.Models.ViewModel.UI_VM
@model UserProfile_PageVM
@inject UserManager<AppUser> UserManager
@inject SignInManager<AppUser> SignInManager
@* User Profile Layout *@
@{
    ViewData["Title"] = "User Profile";
}
 

<div class="container profile-page py-4">
    <div class="profile-header mb-5">
        <div class="profile-banner " role="img" aria-label="User banner image">
            <div class="d-flex justify-content-center">
                <div class="user-banner-info d-flex align-items-center w-100">
                    <div class="profile-avatar-wrapper my-5 mx-auto" style="width: 295px;">
                        <div class="d-flex align-items-center justify-content-between" style="min-width: 100%;">
                            <button type="button" class="user-profile-action-btn">
                                @* Send mail to @Model.appUserVM.email *@
                                @await Html.PartialAsync("~/Views/Shared/Icons/_send-message-icon.cshtml")
                            </button> 
                            <img class="profile-avatar" src="https://github.com/mdo.png" alt="User avatar" />
                            <button type="button" class="user-profile-action-btn">
                                @await Html.PartialAsync("~/Views/Shared/Icons/_follow-user-icon.cshtml")
                             </button>  
                        </div> 
                        <div class="profile-identity">
                            <h1>@Model.appUserVM.UserName</h1>
                            <div class="handle">@Model.appUserVM.email</div>
                            <small class="text-muted">Senior Research Analyst | Joined Jan 2025</small>
                        </div>
                    </div>
                </div>
            </div>
             
            <div class="profile-stats-bar">
                <div class="stat-items text-center" aria-label="User statistics">
                    <div class="stat"><strong>@Model.userStats.Followers</strong>Followers</div>
                    <div class="stat"><strong>@Model.userStats.Following</strong>Following</div>
                    @* <div class="stat"><strong>@Model.userStats.Projects</strong>Projects</div>   *@
                </div>
            </div>

            @{
                var isSignedIn = SignInManager.IsSignedIn(User);
                bool isOwner = false;
                if (isSignedIn)
                {
                    isOwner = UserManager.GetUserId(User) == Model.appUserVM.Id.ToString();
                }
            }

            @if (isOwner)
            {
                <button class="btn btn-primary edit-profile">
                    Edit Profile
                </button>
            }
        </div>
    </div>     
     


    <section class="profile-tabs" data-profile-tabs>
        <ul class="tab-list" role="tablist">
            <li>
                <button class="position-relative" role="tab" aria-selected="true" aria-controls="panel-issue" id="tab-issue">Issues 
                    <strong class="content-count">@Model.paginatedUserIssues.ContentCount.FilteredCount</strong>
                </button>
            </li>
            <li>
                <button class="position-relative" role="tab" aria-selected="false" aria-controls="panel-solution" id="tab-solution">Solutions 
                    <strong class="content-count">@Model.paginatedUserSolutions.ContentCount.FilteredCount</strong>
                </button>
            </li>
            <li><button role="tab" aria-selected="false" aria-controls="panel-projects" id="tab-projects">Projects</button></li>
            <li><button role="tab" aria-selected="false" aria-controls="panel-history" id="tab-history">History</button></li>
            <li><button role="tab" aria-selected="false" aria-controls="panel-stats" id="tab-stats">Stats</button></li>
        </ul>
        <div class="tab-panels">
            <div id="panel-issue" class="tab-panel active" role="tabpanel" aria-labelledby="tab-issue">
                <div class="feed" data-feed="issue">
                    <div id="user-issue-content">

                        @if (Model.paginatedUserIssues.Issues != null && Model.paginatedUserIssues.Issues.Any())
                        {
                            @await Html.PartialAsync("~/Views/Issue/_issue-cards.cshtml", Model.paginatedUserIssues.Issues)
                        }
                        else
                        {
                            <div id="empty-user-issues-feed" class="empty-feed">
                                This user has not created any issues
                            </div>
                        }
                    </div>

                    
                    @await Html.PartialAsync("~/Views/Shared/Components/_pagination-button.cshtml", new PaginationButton_VM
                    {
                        ElementId = "fetchPaginatedUserIssues",
                        ContentType = "user-issues",
                        Target = "#sub-issue-content",
                        Url = "/issue/getPaginatedUserIssues/" + @Model.appUserVM.Id,
                        CurrentPage = Model.paginatedUserIssues.ContentCount.FilteredCount,
                        PageSize = Model.paginatedUserIssues.PageSize,
                        TotalCount = Model.paginatedUserIssues.ContentCount.FilteredCount,
                        })
                </div>   
            </div>
            <div id="panel-solution" class="tab-panel" role="tabpanel" aria-labelledby="tab-solution">
                <div class="feed" data-feed="solution">
                    <div id="user-solution-content">

                        @if (Model.paginatedUserSolutions.Solutions != null && Model.paginatedUserSolutions.Solutions.Any())
                        {
                            @await Html.PartialAsync("~/Views/Solution/_solution-cards.cshtml", Model.paginatedUserSolutions.Solutions)
                        }
                        else
                        {
                            <div id="empty-user-solution-feed" class="empty-feed">
                                This user has not created any solutions
                            </div>
                        }
                    </div>
                </div>
            </div>
            <div id="panel-projects" class="tab-panel" role="tabpanel" aria-labelledby="tab-projects">
                <h2 class="h5">Projects</h2>
                <p class="text-muted">Collaborative or owned research projects.</p>
                <div class="feed" data-feed="projects">
                    <p>(Projects grid placeholder)</p>
                </div>
            </div>
            <div id="panel-history" class="tab-panel" role="tabpanel" aria-labelledby="tab-history">
                <h2 class="h5">Revision / Participation History</h2>
                <div class="feed" data-feed="history">
                    @foreach (var entry in Model.userHistory)
                    {
                        @await Html.PartialAsync("~/Views/UserProfile/_UserHistoryEntry.cshtml", entry)
                    }
                </div>
            </div>
            <div id="panel-stats" class="tab-panel" role="tabpanel" aria-labelledby="tab-stats">
                <h2 class="h5">Engagement & Impact</h2>
                <div class="feed" data-feed="stats">
                    <p>(Charts / metrics placeholder)</p>
                </div>
            </div>
        </div>
    </section>
</div>

<script>
    (function() {
        const tabsRoot = document.querySelector('[data-profile-tabs]');
        if (!tabsRoot) return;
        const tabs = Array.from(tabsRoot.querySelectorAll('[role="tab"]'));
        const panels = Array.from(tabsRoot.querySelectorAll('[role="tabpanel"]'));

        // Reinitialize vote dials for the active tab panel
        function reinitializeVoteDialsForActivePanel() {
            const activePanel = panels.find(p => p.classList.contains('active'));
            if (!activePanel) return;
            const cards = activePanel.querySelectorAll('.issue-card, .solution-card');
            cards.forEach(card => {
                const cardId = card.id;
                const dialContainer = card.querySelector('.dial-container');
                if (dialContainer && dialContainer.children.length > 0) {
                    const voteContainer = document.getElementById(`vote-toggle-container-${cardId}`);
                    if (voteContainer) {
                        setTimeout(() => {
                            initializeCard(cardId);
                        }, 50);
                    }
                }
            });
        }

        function activate(tab) {
            tabs.forEach(t => { const sel = t === tab; t.setAttribute('aria-selected', sel); });
            panels.forEach(p => p.classList.toggle('active', p.id === tab.getAttribute('aria-controls')));
            // Reinitialize dials after tab is activated and visible
            setTimeout(reinitializeVoteDialsForActivePanel, 60);
        }
        tabs.forEach(tab => {
            tab.addEventListener('click', () => activate(tab));
            tab.addEventListener('keydown', e => {
                const idx = tabs.indexOf(document.activeElement);
                if (idx < 0) return;
                if (['ArrowRight','ArrowLeft','Home','End'].includes(e.key)) { e.preventDefault(); }
                let nextIdx = idx;
                if (e.key === 'ArrowRight') nextIdx = (idx + 1) % tabs.length;
                if (e.key === 'ArrowLeft') nextIdx = (idx - 1 + tabs.length) % tabs.length;
                if (e.key === 'Home') nextIdx = 0;
                if (e.key === 'End') nextIdx = tabs.length - 1;
                if (nextIdx !== idx) { tabs[nextIdx].focus(); activate(tabs[nextIdx]); }
            });
        });

    })();
</script>