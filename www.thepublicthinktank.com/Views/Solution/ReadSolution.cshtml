@using atlas_the_public_think_tank.Models.ViewModel
@*
    Layout of the solution page, where the sub-issues, comments, etc can be found by the user
*@


@model Solution_ReadVM;
@{
    ViewData["Title"] = Model.Title;
}

<div class="container mt-3  ">

    @await Html.PartialAsync("~/Views/Solution/_solution-card.cshtml", Model) 

    <nav class="d-flex position-sticky bg-body" style="top:var(--header-height); z-index:11">
        <div class="nav nav-tabs flex-grow-1 text-nowrap overflow-x-scroll overflow-y-hidden" style="flex-wrap: revert;" id="nav-tab" role="tablist">

            <button class="nav-link active" id="comments-tab" data-bs-toggle="tab" data-bs-target="#issue-comments" type="button" role="tab" aria-controls="nav-profile" aria-selected="false">
                <div class="content-count">@Model.Comments.Count()</div>
                @await Html.PartialAsync("~/Views/Shared/Icons/_Comments.cshtml")
                Comments
            </button>
            <button class="nav-link" id="sub-issues-tab" data-bs-toggle="tab" data-bs-target="#sub-issues" type="button" role="tab" aria-controls="nav-profile" aria-selected="false">
                <div class="content-count">@Model.PaginatedSubIssues.ContentCount.TotalCount</div>
                @await Html.PartialAsync("~/Views/Shared/Icons/_SubIssues.cshtml")
                Sub-Issues
            </button>
            <button class="nav-link d-flex align-items-center" id="parent-post-tab" data-bs-toggle="tab" data-bs-target="#parent-post" type="button" role="tab" aria-controls="nav-profile" aria-selected="false">
                <div class="content-count">
                    <span>@(Model.ParentIssue != null ? 1 : 0)</span>
                </div>
                <div class="me-2">
                    @await Html.PartialAsync("~/Views/Shared/Icons/_ParentIssue.cshtml")
                </div>

                @if (Model.ParentIssue != null)
                {
                    <span>Parent Issue</span>
                }
                else
                {
                    <span>Parent Post</span>
                }
            </button>


        </div>
        <div class="ms-2 pt-2">

            <a class="nav-link dropdown-toggle" data-bs-toggle="dropdown" href="#" role="button" aria-expanded="false" id="actionDropdown">
                @Html.Partial("~/Views/Shared/Icons/_ActionsIcon.cshtml")
                Actions
            </a>
            <ul class="dropdown-menu" id="dynamic-actions">
                <!-- Content will be dynamically populated -->
            </ul>
        </div>
    </nav>
    <div class="tab-content" id="nav-tabContent">

        <div class="tab-pane show active fade border border-1 border-top-0" id="issue-comments" role="tabpanel" aria-labelledby="comments-tab" tabindex="0">

            @if (Model.Comments.Count() == 0)
            {
                <div id="empty-issueView-comment-feed" class="empty-feed">
                    <div class="comment-feed">
                        <div class="content">
                            <h2>Empty Comment Feed</h2>
                            <button class="outlined-text">Start a Discussion</button>
                        </div>
                    </div>
                </div>
            }
            else
            {

                <p>Comment feed for this issue</p>
            }
        </div>
        <div class="tab-pane fade border border-1 border-top-0" id="sub-issues" role="tabpanel" aria-labelledby="sub-issues-tab" tabindex="0">
           
                <div id="sub-issue-content">
                    @if (Model.PaginatedSubIssues != null && Model.PaginatedSubIssues.Issues.Any())
                    {
                    @await Html.PartialAsync("~/Views/Issue/_issue-cards.cshtml", Model.PaginatedSubIssues.Issues)
                } else
                {
                    <div id="empty-issueView-sub-issues-feed" class="empty-feed">

                        <div class="comment-feed">
                            <div class="content">
                                <h2>Empty Sub Issues Feed</h2>
                                <a target="_blank" href="@Url.Action("CreateIssue", "Issue", new { parentSolutionID = Model.SolutionID })">
                                    <button class="outlined-text">Create Sub-Issue</button>
                                </a>

                            </div>
                        </div>
                    </div>

                }
            </div>

                @await Html.PartialAsync("~/Views/Shared/Components/_pagination-button.cshtml", new PaginationButton_ReadVM
                {
                    ElementId = "fetchPaginatedSubIssues",
                    ContentType = "sub-issues",
                    Target = "#sub-issue-content",
                    Url = "/solution/getPaginatedSubIssues/" + @Model.SolutionID,
                    CurrentPage = Model.PaginatedSubIssues.ContentCount.TotalCount,
                    PageSize = Model.PaginatedSubIssues.PageSize,
                    TotalCount = Model.PaginatedSubIssues.ContentCount.TotalCount,
                    // TotalPages = Model.PaginatedSubIssues.TotalPages
                })


        </div>

        <div class="tab-pane fade border border-1 border-top-0" id="parent-post" role="tabpanel" aria-labelledby="parent-post-tab" tabindex="0">
            @if (Model.ParentIssue != null)
            {
                @Html.Partial("~/Views/Issue/_issue-card.cshtml", Model.ParentIssue)
                ;
            }
            else
            {
                <p class="empty-feed">There is no parent post</p>
            }
        </div>
    </div>
</div>

<script>
    document.addEventListener("DOMContentLoaded", function() {
        dynamicDropdownContent();
        initializeDialsForTabbedLayout();

        const paginationButton = document.getElementById("fetchPaginatedSubIssues")
        if (paginationButton) {
            setPaginationButtonListener(paginationButton)
        }
    });

       




    function initializeDialsForTabbedLayout() {
        // Initialize vote dials on tab show event
        const subIssuesTab = document.getElementById('sub-issues-tab');
        const parentPostTab = document.getElementById('parent-post-tab');

        if (subIssuesTab) {
            subIssuesTab.addEventListener('shown.bs.tab', function (e) {
                console.log('Sub-issues tab activated - reinitializing vote dials');
                reinitializeVoteDials('sub-issues');
            });
        }

        if (parentPostTab) {
            parentPostTab.addEventListener('shown.bs.tab', function (e) {
                const tabText = parentPostTab.textContent.trim();
                console.log(`${tabText} tab activated - reinitializing vote dials`);
                reinitializeVoteDials('parent-post');
            });
        }

        // Function to find all issue cards in a tab and reinitialize vote dials
         function reinitializeVoteDials(tabId) {
        const tabPane = document.getElementById(tabId);
        if (!tabPane) return;

        // Change this line to look for both issue and solution cards
        const issueCards = tabPane.querySelectorAll('.issue-card, .solution-card');

        issueCards.forEach(card => {
            // Don't replace the ID prefix - use the full ID
            const issueId = card.id;
            // console.log(`Reinitializing vote dial for content ${issueId}`);

            const dialContainer = card.querySelector('.dial-container');
            if (dialContainer) {
                // Check if dial content already exists
                if (dialContainer.children.length > 0) {
                    // If vote container exists, just reinitialize it
                    const voteContainer = document.getElementById(`vote-toggle-container-${issueId}`);
                    if (voteContainer) {
                        setTimeout(() => {
                            // Reinitialize with a slight delay to ensure proper rendering
                            initializeCard(issueId);
                        }, 50);
                    } else {
                        // If vote container doesn't exist, need to fetch the dial
                        console.error("Content missing vote dial");
                    }
                } else {
                    // If no dial content, fetch it
                    console.error("Content missing vote dial");
                }
            }
        });
    }
        // Helper function to fetch and initialize vote dials
        function fetchAndInitializeCard(issueId, dialContainer) {
            fetch(`/issue/GetVoteDial?issueId=${issueId}`)
                .then(response => response.text())
                .then(data => {
                    dialContainer.innerHTML = data;
                    setTimeout(() => {
                        initializeCard(issueId);
                    }, 50);
                })
                .catch(error => console.error(`Error fetching vote dial for issue ${issueId}:`, error));
        }
    }

    function dynamicDropdownContent() {
        const dropdownMenu = document.getElementById('dynamic-actions');

        // Menu content templates for each tab
        const menuTemplates = {
            'comments-tab': `
                <li><a class="dropdown-item" href="#">Create Discussion</a></li>
            `,
            'sub-issues-tab': `
                <li><a class="dropdown-item" href="@Url.Action("CreateIssue", "Issue", new { parentSolutionID = Model.SolutionID })">Create Sub-Issue</a></li>
            `,
            'parent-post-tab': `
                @if (Model.ParentIssue != null)
                {
                        <li><a class="dropdown-item" href="@Url.Action("ReadIssue", "Issue", new { id = Model.ParentIssue.IssueID })">Go to Parent Issue</a></li>
                }
            `
        };

        // Function to update dropdown content based on active tab
        // Make this function available globally
        window.updateDropdownContent = function(activeTabId) {
            if (dropdownMenu && menuTemplates[activeTabId]) {
                dropdownMenu.innerHTML = menuTemplates[activeTabId];
            }
        }

        // Initialize with default tab content
        updateDropdownContent('comments-tab');

        // Add event listeners to all tabs
        const tabs = document.querySelectorAll('[data-bs-toggle="tab"]');
        tabs.forEach(tab => {
            tab.addEventListener('shown.bs.tab', function(event) {
                updateDropdownContent(event.target.id);
            });
        });
    }
</script>

<script src="~/js/remember-tab.js"></script>