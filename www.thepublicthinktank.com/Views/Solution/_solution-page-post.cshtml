@model Solution_ReadVM
@*
    For more information on enabling MVC for empty projects, visit https://go.microsoft.com/fwlink/?LinkID=397860
*@
@{
    Console.WriteLine();
}

<div class="card mb-3 solution-card" id="solution-@Model.SolutionID">
    <div class="">
        <div class="dial-container" style="float:left">
        </div>

        <div class="card-header" style="border-left:var(--bs-card-border-width) solid var(--bs-card-border-color); border-top-left-radius: 0; margin-left: var(--dial-width)">
            <h5 class="mb-0">
                <div style="font-size:20px;" class="float-end">
                    @Html.Partial("~/Views/Shared/Components/_scope-ribbon.cshtml", Model.Scope)
                </div>
                @* Title and this float need to be next to each other for float styling to work. *@
                @Model.Title
            </h5>
            <small class="text-muted">Posted by @Model.Author?.UserName on @Model.CreatedAt.ToString("MMM dd, yyyy")</small>
        </div>

        <p class="mx-2" style="white-space: pre-wrap">@Model.Content</p>

        @if (Model.Categories != null && Model.Categories.Any())
        {
            <div class="mt-2">
                @foreach (var category in Model.Categories)
                {
                    <span class="badge bg-secondary me-1">@category.CategoryName</span>
                }
            </div>
        }
    </div>
    <div class="card-footer d-flex justify-content-between">
        <div class="" id="card-@Model.SolutionID-footer-alert">
        </div>
        <div class="">
            <a href="#" class="btn btn-sm btn-outline-secondary bg-success-subtle">Share</a>
            <a href="#" class="btn btn-sm btn-outline-secondary bg-dark-subtle">Follow</a>
        </div>
    </div>
</div>

@* This script does load with cshtml because it is part of the initial page load *@
<script>
    console.log("DOMContentLoaded card for solution ID: @Model.SolutionID");
    document.addEventListener("DOMContentLoaded", () => {
        try {
            const solutionId = '@Model.SolutionID';
            console.log("Fetching vote dial for solution:", solutionId);

            fetch(`/solution/GetVoteDial?SolutionID=${solutionId}`)
                .then(response => {
                    if (!response.ok) {
                        throw new Error(`HTTP error! Status: ${response.status}`);
                    }
                    return response.text();
                })
                .then(data => {
                    console.log("Vote dial data received:", {SolutionID: solutionId, dataLength: data.length});
                    const thisElement = document.querySelector(`#solution-${solutionId}`);
                    if (!thisElement) {
                        console.error(`Element #solution-${solutionId} not found`);
                        return;
                    }

                    const dialContainer = thisElement.querySelector('.dial-container');
                    if (dialContainer) {
                        dialContainer.innerHTML = data;
                        // Make sure this function exists and is defined before this script runs
                        if (typeof initializeCard === 'function') {
                            try {
                                initializeCard(solutionId);
                            } catch (initError) {
                                console.error("Error in initializeVoteDial:", initError);
                            }
                        } else {
                            console.error("initializeVoteDial function is not defined");
                        }
                    } else {
                        console.error(`Dial container not found in #solution-${solutionId}`);
                    }
                })
                .catch(error => console.error('Error fetching vote dial:', error));
        } catch (outerError) {
            console.error("Error in DOMContentLoaded handler:", outerError);
        }
    });
</script>